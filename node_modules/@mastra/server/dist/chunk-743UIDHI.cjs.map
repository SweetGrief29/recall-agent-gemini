{"version":3,"sources":["../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/anthropic-error.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/anthropic-messages-options.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/get-cache-control.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/web-search_20250305.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/anthropic-prepare-tools.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/code-execution_20250522.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/convert-to-anthropic-messages-prompt.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/map-anthropic-stop-reason.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/anthropic-messages-language-model.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/bash_20241022.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/bash_20250124.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/computer_20241022.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/computer_20250124.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/text-editor_20241022.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/text-editor_20250124.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/tool/text-editor_20250429.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/anthropic-tools.ts","../../../node_modules/.pnpm/@ai-sdk+anthropic@2.0.4_zod@3.25.76/node_modules/@ai-sdk/anthropic/src/anthropic-provider.ts"],"names":["z","createJsonErrorResponseHandler","anthropic","createProviderDefinedToolFactoryWithOutputSchema","anthropicTools","UnsupportedFunctionalityError","factory","_a","_b","parseProviderOptions","convertToBase64","i","generateId","combineHeaders","resolve","postJsonToApi","createJsonResponseHandler","createEventSourceResponseHandler","createProviderDefinedToolFactory","withoutTrailingSlash","loadApiKey","NoSuchModelError"],"mappings":"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","file":"chunk-743UIDHI.cjs","sourcesContent":["import { createJsonErrorResponseHandler } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const anthropicErrorDataSchema = z.object({\n  type: z.literal('error'),\n  error: z.object({\n    type: z.string(),\n    message: z.string(),\n  }),\n});\n\nexport type AnthropicErrorData = z.infer<typeof anthropicErrorDataSchema>;\n\nexport const anthropicFailedResponseHandler = createJsonErrorResponseHandler({\n  errorSchema: anthropicErrorDataSchema,\n  errorToMessage: data => data.error.message,\n});\n","import { z } from 'zod/v4';\n\n// https://docs.anthropic.com/claude/docs/models-overview\nexport type AnthropicMessagesModelId =\n  | 'claude-opus-4-20250514'\n  | 'claude-sonnet-4-20250514'\n  | 'claude-3-7-sonnet-20250219'\n  | 'claude-3-5-sonnet-latest'\n  | 'claude-3-5-sonnet-20241022'\n  | 'claude-3-5-sonnet-20240620'\n  | 'claude-3-5-haiku-latest'\n  | 'claude-3-5-haiku-20241022'\n  | 'claude-3-opus-latest'\n  | 'claude-3-opus-20240229'\n  | 'claude-3-sonnet-20240229'\n  | 'claude-3-haiku-20240307'\n  | (string & {});\n\n/**\n * Anthropic file part provider options for document-specific features.\n * These options apply to individual file parts (documents).\n */\nexport const anthropicFilePartProviderOptions = z.object({\n  /**\n   * Citation configuration for this document.\n   * When enabled, this document will generate citations in the response.\n   */\n  citations: z\n    .object({\n      /**\n       * Enable citations for this document\n       */\n      enabled: z.boolean(),\n    })\n    .optional(),\n\n  /**\n   * Custom title for the document.\n   * If not provided, the filename will be used.\n   */\n  title: z.string().optional(),\n\n  /**\n   * Context about the document that will be passed to the model\n   * but not used towards cited content.\n   * Useful for storing document metadata as text or stringified JSON.\n   */\n  context: z.string().optional(),\n});\n\nexport type AnthropicFilePartProviderOptions = z.infer<\n  typeof anthropicFilePartProviderOptions\n>;\n\nexport const anthropicProviderOptions = z.object({\n  sendReasoning: z.boolean().optional(),\n\n  thinking: z\n    .object({\n      type: z.union([z.literal('enabled'), z.literal('disabled')]),\n      budgetTokens: z.number().optional(),\n    })\n    .optional(),\n\n  /**\n   * Whether to disable parallel function calling during tool use. Default is false.\n   * When set to true, Claude will use at most one tool per response.\n   */\n  disableParallelToolUse: z.boolean().optional(),\n});\n\nexport type AnthropicProviderOptions = z.infer<typeof anthropicProviderOptions>;\n","import { SharedV2ProviderMetadata } from '@ai-sdk/provider';\nimport { AnthropicCacheControl } from './anthropic-api-types';\n\nexport function getCacheControl(\n  providerMetadata: SharedV2ProviderMetadata | undefined,\n): AnthropicCacheControl | undefined {\n  const anthropic = providerMetadata?.anthropic;\n\n  // allow both cacheControl and cache_control:\n  const cacheControlValue = anthropic?.cacheControl ?? anthropic?.cache_control;\n\n  // Pass through value assuming it is of the correct type.\n  // The Anthropic API will validate the value.\n  return cacheControlValue as AnthropicCacheControl | undefined;\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\n// Args validation schema\nexport const webSearch_20250305ArgsSchema = z.object({\n  /**\n   * Maximum number of web searches Claude can perform during the conversation.\n   */\n  maxUses: z.number().optional(),\n\n  /**\n   * Optional list of domains that Claude is allowed to search.\n   */\n  allowedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Optional list of domains that Claude should avoid when searching.\n   */\n  blockedDomains: z.array(z.string()).optional(),\n\n  /**\n   * Optional user location information to provide geographically relevant search results.\n   */\n  userLocation: z\n    .object({\n      type: z.literal('approximate'),\n      city: z.string().optional(),\n      region: z.string().optional(),\n      country: z.string().optional(),\n      timezone: z.string().optional(),\n    })\n    .optional(),\n});\n\nexport const webSearch_20250305OutputSchema = z.array(\n  z.object({\n    url: z.string(),\n    title: z.string(),\n    pageAge: z.string().nullable(),\n    encryptedContent: z.string(),\n    type: z.string(),\n  }),\n);\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The search query to execute.\n     */\n    query: string;\n  },\n  Array<{\n    url: string;\n    title: string;\n    pageAge: string | null;\n    encryptedContent: string;\n    type: string;\n  }>,\n  {\n    /**\n     * Maximum number of web searches Claude can perform during the conversation.\n     */\n    maxUses?: number;\n\n    /**\n     * Optional list of domains that Claude is allowed to search.\n     */\n    allowedDomains?: string[];\n\n    /**\n     * Optional list of domains that Claude should avoid when searching.\n     */\n    blockedDomains?: string[];\n\n    /**\n     * Optional user location information to provide geographically relevant search results.\n     */\n    userLocation?: {\n      type: 'approximate';\n      city?: string;\n      region?: string;\n      country?: string;\n      timezone?: string;\n    };\n  }\n>({\n  id: 'anthropic.web_search_20250305',\n  name: 'web_search',\n  inputSchema: z.object({\n    query: z.string(),\n  }),\n  outputSchema: webSearch_20250305OutputSchema,\n});\n\nexport const webSearch_20250305 = (\n  args: Parameters<typeof factory>[0] = {}, // default\n) => {\n  return factory(args);\n};\n","import {\n  LanguageModelV2CallOptions,\n  LanguageModelV2CallWarning,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { AnthropicTool, AnthropicToolChoice } from './anthropic-api-types';\nimport { getCacheControl } from './get-cache-control';\nimport { webSearch_20250305ArgsSchema } from './tool/web-search_20250305';\n\nfunction isWebSearchTool(\n  tool: unknown,\n): tool is Extract<AnthropicTool, { type: 'web_search_20250305' }> {\n  return (\n    typeof tool === 'object' &&\n    tool !== null &&\n    'type' in tool &&\n    tool.type === 'web_search_20250305'\n  );\n}\n\nexport function prepareTools({\n  tools,\n  toolChoice,\n  disableParallelToolUse,\n}: {\n  tools: LanguageModelV2CallOptions['tools'];\n  toolChoice?: LanguageModelV2CallOptions['toolChoice'];\n  disableParallelToolUse?: boolean;\n}): {\n  tools: Array<AnthropicTool> | undefined;\n  toolChoice: AnthropicToolChoice | undefined;\n  toolWarnings: LanguageModelV2CallWarning[];\n  betas: Set<string>;\n} {\n  // when the tools array is empty, change it to undefined to prevent errors:\n  tools = tools?.length ? tools : undefined;\n\n  const toolWarnings: LanguageModelV2CallWarning[] = [];\n  const betas = new Set<string>();\n\n  if (tools == null) {\n    return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n  }\n\n  const anthropicTools: AnthropicTool[] = [];\n\n  for (const tool of tools) {\n    // handle direct web search tool objects passed from provider options\n    if (isWebSearchTool(tool)) {\n      anthropicTools.push(tool);\n      continue;\n    }\n\n    switch (tool.type) {\n      case 'function':\n        const cacheControl = getCacheControl(tool.providerOptions);\n\n        anthropicTools.push({\n          name: tool.name,\n          description: tool.description,\n          input_schema: tool.inputSchema,\n          cache_control: cacheControl,\n        });\n        break;\n      case 'provider-defined':\n        switch (tool.id) {\n          case 'anthropic.computer_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20250124',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          case 'anthropic.computer_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'computer',\n              type: 'computer_20241022',\n              display_width_px: tool.args.displayWidthPx as number,\n              display_height_px: tool.args.displayHeightPx as number,\n              display_number: tool.args.displayNumber as number,\n            });\n            break;\n          case 'anthropic.text_editor_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20250124',\n            });\n            break;\n          case 'anthropic.text_editor_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'str_replace_editor',\n              type: 'text_editor_20241022',\n            });\n            break;\n          case 'anthropic.text_editor_20250429':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'str_replace_based_edit_tool',\n              type: 'text_editor_20250429',\n            });\n            break;\n          case 'anthropic.bash_20250124':\n            betas.add('computer-use-2025-01-24');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20250124',\n            });\n            break;\n          case 'anthropic.bash_20241022':\n            betas.add('computer-use-2024-10-22');\n            anthropicTools.push({\n              name: 'bash',\n              type: 'bash_20241022',\n            });\n            break;\n          case 'anthropic.web_search_20250305': {\n            const args = webSearch_20250305ArgsSchema.parse(tool.args);\n            anthropicTools.push({\n              type: 'web_search_20250305',\n              name: 'web_search',\n              max_uses: args.maxUses,\n              allowed_domains: args.allowedDomains,\n              blocked_domains: args.blockedDomains,\n              user_location: args.userLocation,\n            });\n            break;\n          }\n          case 'anthropic.code_execution_20250522': {\n            betas.add('code-execution-2025-05-22');\n            anthropicTools.push({\n              type: 'code_execution_20250522',\n              name: 'code_execution',\n            });\n            break;\n          }\n          default:\n            toolWarnings.push({ type: 'unsupported-tool', tool });\n            break;\n        }\n        break;\n      default:\n        toolWarnings.push({ type: 'unsupported-tool', tool });\n        break;\n    }\n  }\n\n  if (toolChoice == null) {\n    return {\n      tools: anthropicTools,\n      toolChoice: disableParallelToolUse\n        ? { type: 'auto', disable_parallel_tool_use: disableParallelToolUse }\n        : undefined,\n      toolWarnings,\n      betas,\n    };\n  }\n\n  const type = toolChoice.type;\n\n  switch (type) {\n    case 'auto':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'auto',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'required':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'any',\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    case 'none':\n      // Anthropic does not support 'none' tool choice, so we remove the tools:\n      return { tools: undefined, toolChoice: undefined, toolWarnings, betas };\n    case 'tool':\n      return {\n        tools: anthropicTools,\n        toolChoice: {\n          type: 'tool',\n          name: toolChoice.toolName,\n          disable_parallel_tool_use: disableParallelToolUse,\n        },\n        toolWarnings,\n        betas,\n      };\n    default: {\n      const _exhaustiveCheck: never = type;\n      throw new UnsupportedFunctionalityError({\n        functionality: `tool choice type: ${_exhaustiveCheck}`,\n      });\n    }\n  }\n}\n","import { createProviderDefinedToolFactoryWithOutputSchema } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const codeExecution_20250522OutputSchema = z.object({\n  type: z.literal('code_execution_result'),\n  stdout: z.string(),\n  stderr: z.string(),\n  return_code: z.number(),\n});\n\nconst factory = createProviderDefinedToolFactoryWithOutputSchema<\n  {\n    /**\n     * The Python code to execute.\n     */\n    code: string;\n  },\n  {\n    type: 'code_execution_result';\n    stdout: string;\n    stderr: string;\n    return_code: number;\n  },\n  {}\n>({\n  id: 'anthropic.code_execution_20250522',\n  name: 'code_execution',\n  inputSchema: z.object({\n    code: z.string(),\n  }),\n  outputSchema: codeExecution_20250522OutputSchema,\n});\n\nexport const codeExecution_20250522 = (\n  args: Parameters<typeof factory>[0] = {},\n) => {\n  return factory(args);\n};\n","import {\n  LanguageModelV2CallWarning,\n  LanguageModelV2DataContent,\n  LanguageModelV2Message,\n  LanguageModelV2Prompt,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport { convertToBase64, parseProviderOptions } from '@ai-sdk/provider-utils';\nimport {\n  AnthropicAssistantMessage,\n  AnthropicMessagesPrompt,\n  AnthropicToolResultContent,\n  AnthropicUserMessage,\n} from './anthropic-api-types';\nimport { anthropicReasoningMetadataSchema } from './anthropic-messages-language-model';\nimport { anthropicFilePartProviderOptions } from './anthropic-messages-options';\nimport { getCacheControl } from './get-cache-control';\nimport { webSearch_20250305OutputSchema } from './tool/web-search_20250305';\nimport { codeExecution_20250522OutputSchema } from './tool/code-execution_20250522';\n\nfunction convertToString(data: LanguageModelV2DataContent): string {\n  if (typeof data === 'string') {\n    return Buffer.from(data, 'base64').toString('utf-8');\n  }\n\n  if (data instanceof Uint8Array) {\n    return new TextDecoder().decode(data);\n  }\n\n  if (data instanceof URL) {\n    throw new UnsupportedFunctionalityError({\n      functionality: 'URL-based text documents are not supported for citations',\n    });\n  }\n\n  throw new UnsupportedFunctionalityError({\n    functionality: `unsupported data type for text documents: ${typeof data}`,\n  });\n}\n\nexport async function convertToAnthropicMessagesPrompt({\n  prompt,\n  sendReasoning,\n  warnings,\n}: {\n  prompt: LanguageModelV2Prompt;\n  sendReasoning: boolean;\n  warnings: LanguageModelV2CallWarning[];\n}): Promise<{\n  prompt: AnthropicMessagesPrompt;\n  betas: Set<string>;\n}> {\n  const betas = new Set<string>();\n  const blocks = groupIntoBlocks(prompt);\n\n  let system: AnthropicMessagesPrompt['system'] = undefined;\n  const messages: AnthropicMessagesPrompt['messages'] = [];\n\n  async function shouldEnableCitations(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<boolean> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return anthropicOptions?.citations?.enabled ?? false;\n  }\n\n  async function getDocumentMetadata(\n    providerMetadata: SharedV2ProviderMetadata | undefined,\n  ): Promise<{ title?: string; context?: string }> {\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions: providerMetadata,\n      schema: anthropicFilePartProviderOptions,\n    });\n\n    return {\n      title: anthropicOptions?.title,\n      context: anthropicOptions?.context,\n    };\n  }\n\n  for (let i = 0; i < blocks.length; i++) {\n    const block = blocks[i];\n    const isLastBlock = i === blocks.length - 1;\n    const type = block.type;\n\n    switch (type) {\n      case 'system': {\n        if (system != null) {\n          throw new UnsupportedFunctionalityError({\n            functionality:\n              'Multiple system messages that are separated by user/assistant messages',\n          });\n        }\n\n        system = block.messages.map(({ content, providerOptions }) => ({\n          type: 'text',\n          text: content,\n          cache_control: getCacheControl(providerOptions),\n        }));\n\n        break;\n      }\n\n      case 'user': {\n        // combines all user and tool messages in this block into a single message:\n        const anthropicContent: AnthropicUserMessage['content'] = [];\n\n        for (const message of block.messages) {\n          const { role, content } = message;\n          switch (role) {\n            case 'user': {\n              for (let j = 0; j < content.length; j++) {\n                const part = content[j];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = j === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                switch (part.type) {\n                  case 'text': {\n                    anthropicContent.push({\n                      type: 'text',\n                      text: part.text,\n                      cache_control: cacheControl,\n                    });\n                    break;\n                  }\n\n                  case 'file': {\n                    if (part.mediaType.startsWith('image/')) {\n                      anthropicContent.push({\n                        type: 'image',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type:\n                                  part.mediaType === 'image/*'\n                                    ? 'image/jpeg'\n                                    : part.mediaType,\n                                data: convertToBase64(part.data),\n                              },\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'application/pdf') {\n                      betas.add('pdfs-2024-09-25');\n\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'base64',\n                                media_type: 'application/pdf',\n                                data: convertToBase64(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else if (part.mediaType === 'text/plain') {\n                      const enableCitations = await shouldEnableCitations(\n                        part.providerOptions,\n                      );\n\n                      const metadata = await getDocumentMetadata(\n                        part.providerOptions,\n                      );\n\n                      anthropicContent.push({\n                        type: 'document',\n                        source:\n                          part.data instanceof URL\n                            ? {\n                                type: 'url',\n                                url: part.data.toString(),\n                              }\n                            : {\n                                type: 'text',\n                                media_type: 'text/plain',\n                                data: convertToString(part.data),\n                              },\n                        title: metadata.title ?? part.filename,\n                        ...(metadata.context && { context: metadata.context }),\n                        ...(enableCitations && {\n                          citations: { enabled: true },\n                        }),\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      throw new UnsupportedFunctionalityError({\n                        functionality: `media type: ${part.mediaType}`,\n                      });\n                    }\n\n                    break;\n                  }\n                }\n              }\n\n              break;\n            }\n            case 'tool': {\n              for (let i = 0; i < content.length; i++) {\n                const part = content[i];\n\n                // cache control: first add cache control from part.\n                // for the last part of a message,\n                // check also if the message has cache control.\n                const isLastPart = i === content.length - 1;\n\n                const cacheControl =\n                  getCacheControl(part.providerOptions) ??\n                  (isLastPart\n                    ? getCacheControl(message.providerOptions)\n                    : undefined);\n\n                const output = part.output;\n                let contentValue: AnthropicToolResultContent['content'];\n                switch (output.type) {\n                  case 'content':\n                    contentValue = output.value.map(contentPart => {\n                      switch (contentPart.type) {\n                        case 'text':\n                          return {\n                            type: 'text',\n                            text: contentPart.text,\n                            cache_control: undefined,\n                          };\n                        case 'media': {\n                          if (contentPart.mediaType.startsWith('image/')) {\n                            return {\n                              type: 'image',\n                              source: {\n                                type: 'base64',\n                                media_type: contentPart.mediaType,\n                                data: contentPart.data,\n                              },\n                              cache_control: undefined,\n                            };\n                          }\n\n                          throw new UnsupportedFunctionalityError({\n                            functionality: `media type: ${contentPart.mediaType}`,\n                          });\n                        }\n                      }\n                    });\n                    break;\n                  case 'text':\n                  case 'error-text':\n                    contentValue = output.value;\n                    break;\n                  case 'json':\n                  case 'error-json':\n                  default:\n                    contentValue = JSON.stringify(output.value);\n                    break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_result',\n                  tool_use_id: part.toolCallId,\n                  content: contentValue,\n                  is_error:\n                    output.type === 'error-text' || output.type === 'error-json'\n                      ? true\n                      : undefined,\n                  cache_control: cacheControl,\n                });\n              }\n\n              break;\n            }\n            default: {\n              const _exhaustiveCheck: never = role;\n              throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n            }\n          }\n        }\n\n        messages.push({ role: 'user', content: anthropicContent });\n\n        break;\n      }\n\n      case 'assistant': {\n        // combines multiple assistant messages in this block into a single message:\n        const anthropicContent: AnthropicAssistantMessage['content'] = [];\n\n        for (let j = 0; j < block.messages.length; j++) {\n          const message = block.messages[j];\n          const isLastMessage = j === block.messages.length - 1;\n          const { content } = message;\n\n          for (let k = 0; k < content.length; k++) {\n            const part = content[k];\n            const isLastContentPart = k === content.length - 1;\n\n            // cache control: first add cache control from part.\n            // for the last part of a message,\n            // check also if the message has cache control.\n            const cacheControl =\n              getCacheControl(part.providerOptions) ??\n              (isLastContentPart\n                ? getCacheControl(message.providerOptions)\n                : undefined);\n\n            switch (part.type) {\n              case 'text': {\n                anthropicContent.push({\n                  type: 'text',\n                  text:\n                    // trim the last text part if it's the last message in the block\n                    // because Anthropic does not allow trailing whitespace\n                    // in pre-filled assistant responses\n                    isLastBlock && isLastMessage && isLastContentPart\n                      ? part.text.trim()\n                      : part.text,\n\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'reasoning': {\n                if (sendReasoning) {\n                  const reasoningMetadata = await parseProviderOptions({\n                    provider: 'anthropic',\n                    providerOptions: part.providerOptions,\n                    schema: anthropicReasoningMetadataSchema,\n                  });\n\n                  if (reasoningMetadata != null) {\n                    if (reasoningMetadata.signature != null) {\n                      anthropicContent.push({\n                        type: 'thinking',\n                        thinking: part.text,\n                        signature: reasoningMetadata.signature,\n                        cache_control: cacheControl,\n                      });\n                    } else if (reasoningMetadata.redactedData != null) {\n                      anthropicContent.push({\n                        type: 'redacted_thinking',\n                        data: reasoningMetadata.redactedData,\n                        cache_control: cacheControl,\n                      });\n                    } else {\n                      warnings.push({\n                        type: 'other',\n                        message: 'unsupported reasoning metadata',\n                      });\n                    }\n                  } else {\n                    warnings.push({\n                      type: 'other',\n                      message: 'unsupported reasoning metadata',\n                    });\n                  }\n                } else {\n                  warnings.push({\n                    type: 'other',\n                    message:\n                      'sending reasoning content is disabled for this model',\n                  });\n                }\n                break;\n              }\n\n              case 'tool-call': {\n                if (part.providerExecuted) {\n                  if (part.toolName === 'web_search') {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: 'web_search',\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n\n                    break;\n                  }\n\n                  if (part.toolName === 'code_execution') {\n                    anthropicContent.push({\n                      type: 'server_tool_use',\n                      id: part.toolCallId,\n                      name: 'code_execution',\n                      input: part.input,\n                      cache_control: cacheControl,\n                    });\n\n                    break;\n                  }\n\n                  warnings.push({\n                    type: 'other',\n                    message: `provider executed tool call for tool ${part.toolName} is not supported`,\n                  });\n\n                  break;\n                }\n\n                anthropicContent.push({\n                  type: 'tool_use',\n                  id: part.toolCallId,\n                  name: part.toolName,\n                  input: part.input,\n                  cache_control: cacheControl,\n                });\n                break;\n              }\n\n              case 'tool-result': {\n                if (part.toolName === 'web_search') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const webSearchOutput = webSearch_20250305OutputSchema.parse(\n                    output.value,\n                  );\n\n                  anthropicContent.push({\n                    type: 'web_search_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: webSearchOutput.map(result => ({\n                      url: result.url,\n                      title: result.title,\n                      page_age: result.pageAge,\n                      encrypted_content: result.encryptedContent,\n                      type: result.type,\n                    })),\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                if (part.toolName === 'code_execution') {\n                  const output = part.output;\n\n                  if (output.type !== 'json') {\n                    warnings.push({\n                      type: 'other',\n                      message: `provider executed tool result output type ${output.type} for tool ${part.toolName} is not supported`,\n                    });\n\n                    break;\n                  }\n\n                  const codeExecutionOutput =\n                    codeExecution_20250522OutputSchema.parse(output.value);\n\n                  anthropicContent.push({\n                    type: 'code_execution_tool_result',\n                    tool_use_id: part.toolCallId,\n                    content: {\n                      type: codeExecutionOutput.type,\n                      stdout: codeExecutionOutput.stdout,\n                      stderr: codeExecutionOutput.stderr,\n                      return_code: codeExecutionOutput.return_code,\n                    },\n                    cache_control: cacheControl,\n                  });\n\n                  break;\n                }\n\n                warnings.push({\n                  type: 'other',\n                  message: `provider executed tool result for tool ${part.toolName} is not supported`,\n                });\n\n                break;\n              }\n            }\n          }\n        }\n\n        messages.push({ role: 'assistant', content: anthropicContent });\n\n        break;\n      }\n\n      default: {\n        const _exhaustiveCheck: never = type;\n        throw new Error(`content type: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return {\n    prompt: { system, messages },\n    betas,\n  };\n}\n\ntype SystemBlock = {\n  type: 'system';\n  messages: Array<LanguageModelV2Message & { role: 'system' }>;\n};\ntype AssistantBlock = {\n  type: 'assistant';\n  messages: Array<LanguageModelV2Message & { role: 'assistant' }>;\n};\ntype UserBlock = {\n  type: 'user';\n  messages: Array<LanguageModelV2Message & { role: 'user' | 'tool' }>;\n};\n\nfunction groupIntoBlocks(\n  prompt: LanguageModelV2Prompt,\n): Array<SystemBlock | AssistantBlock | UserBlock> {\n  const blocks: Array<SystemBlock | AssistantBlock | UserBlock> = [];\n  let currentBlock: SystemBlock | AssistantBlock | UserBlock | undefined =\n    undefined;\n\n  for (const message of prompt) {\n    const { role } = message;\n    switch (role) {\n      case 'system': {\n        if (currentBlock?.type !== 'system') {\n          currentBlock = { type: 'system', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'assistant': {\n        if (currentBlock?.type !== 'assistant') {\n          currentBlock = { type: 'assistant', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'user': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      case 'tool': {\n        if (currentBlock?.type !== 'user') {\n          currentBlock = { type: 'user', messages: [] };\n          blocks.push(currentBlock);\n        }\n\n        currentBlock.messages.push(message);\n        break;\n      }\n      default: {\n        const _exhaustiveCheck: never = role;\n        throw new Error(`Unsupported role: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  return blocks;\n}\n","import { LanguageModelV2FinishReason } from '@ai-sdk/provider';\n\nexport function mapAnthropicStopReason({\n  finishReason,\n  isJsonResponseFromTool,\n}: {\n  finishReason: string | null | undefined;\n  isJsonResponseFromTool?: boolean;\n}): LanguageModelV2FinishReason {\n  switch (finishReason) {\n    case 'end_turn':\n    case 'stop_sequence':\n      return 'stop';\n    case 'tool_use':\n      return isJsonResponseFromTool ? 'stop' : 'tool-calls';\n    case 'max_tokens':\n      return 'length';\n    default:\n      return 'unknown';\n  }\n}\n","import {\n  JSONObject,\n  JSONValue,\n  LanguageModelV2,\n  LanguageModelV2CallWarning,\n  LanguageModelV2Content,\n  LanguageModelV2FinishReason,\n  LanguageModelV2FunctionTool,\n  LanguageModelV2Prompt,\n  LanguageModelV2StreamPart,\n  LanguageModelV2Usage,\n  SharedV2ProviderMetadata,\n  UnsupportedFunctionalityError,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  ParseResult,\n  Resolvable,\n  combineHeaders,\n  createEventSourceResponseHandler,\n  createJsonResponseHandler,\n  generateId,\n  parseProviderOptions,\n  postJsonToApi,\n  resolve,\n} from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\nimport { anthropicFailedResponseHandler } from './anthropic-error';\nimport {\n  AnthropicMessagesModelId,\n  anthropicProviderOptions,\n} from './anthropic-messages-options';\nimport { prepareTools } from './anthropic-prepare-tools';\nimport { convertToAnthropicMessagesPrompt } from './convert-to-anthropic-messages-prompt';\nimport { mapAnthropicStopReason } from './map-anthropic-stop-reason';\n\nconst citationSchemas = {\n  webSearchResult: z.object({\n    type: z.literal('web_search_result_location'),\n    cited_text: z.string(),\n    url: z.string(),\n    title: z.string(),\n    encrypted_index: z.string(),\n  }),\n  pageLocation: z.object({\n    type: z.literal('page_location'),\n    cited_text: z.string(),\n    document_index: z.number(),\n    document_title: z.string().nullable(),\n    start_page_number: z.number(),\n    end_page_number: z.number(),\n  }),\n  charLocation: z.object({\n    type: z.literal('char_location'),\n    cited_text: z.string(),\n    document_index: z.number(),\n    document_title: z.string().nullable(),\n    start_char_index: z.number(),\n    end_char_index: z.number(),\n  }),\n};\n\nconst citationSchema = z.discriminatedUnion('type', [\n  citationSchemas.webSearchResult,\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation,\n]);\n\nconst documentCitationSchema = z.discriminatedUnion('type', [\n  citationSchemas.pageLocation,\n  citationSchemas.charLocation,\n]);\n\ntype Citation = z.infer<typeof citationSchema>;\nexport type DocumentCitation = z.infer<typeof documentCitationSchema>;\nexport type AnthropicProviderMetadata = SharedV2ProviderMetadata & {\n  usage?: Record<string, JSONValue>;\n};\n\nfunction processCitation(\n  citation: Citation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n  onSource: (source: any) => void,\n) {\n  if (citation.type === 'page_location' || citation.type === 'char_location') {\n    const source = createCitationSource(\n      citation,\n      citationDocuments,\n      generateId,\n    );\n    if (source) {\n      onSource(source);\n    }\n  }\n}\n\nfunction createCitationSource(\n  citation: DocumentCitation,\n  citationDocuments: Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }>,\n  generateId: () => string,\n) {\n  const documentInfo = citationDocuments[citation.document_index];\n  if (!documentInfo) {\n    return null;\n  }\n\n  const providerMetadata =\n    citation.type === 'page_location'\n      ? {\n          citedText: citation.cited_text,\n          startPageNumber: citation.start_page_number,\n          endPageNumber: citation.end_page_number,\n        }\n      : {\n          citedText: citation.cited_text,\n          startCharIndex: citation.start_char_index,\n          endCharIndex: citation.end_char_index,\n        };\n\n  return {\n    type: 'source' as const,\n    sourceType: 'document' as const,\n    id: generateId(),\n    mediaType: documentInfo.mediaType,\n    title: citation.document_title ?? documentInfo.title,\n    filename: documentInfo.filename,\n    providerMetadata: {\n      anthropic: providerMetadata,\n    },\n  };\n}\n\ntype AnthropicMessagesConfig = {\n  provider: string;\n  baseURL: string;\n  headers: Resolvable<Record<string, string | undefined>>;\n  fetch?: FetchFunction;\n  buildRequestUrl?: (baseURL: string, isStreaming: boolean) => string;\n  transformRequestBody?: (args: Record<string, any>) => Record<string, any>;\n  supportedUrls?: () => LanguageModelV2['supportedUrls'];\n  generateId?: () => string;\n};\n\nexport class AnthropicMessagesLanguageModel implements LanguageModelV2 {\n  readonly specificationVersion = 'v2';\n\n  readonly modelId: AnthropicMessagesModelId;\n\n  private readonly config: AnthropicMessagesConfig;\n  private readonly generateId: () => string;\n\n  constructor(\n    modelId: AnthropicMessagesModelId,\n    config: AnthropicMessagesConfig,\n  ) {\n    this.modelId = modelId;\n    this.config = config;\n    this.generateId = config.generateId ?? generateId;\n  }\n\n  supportsUrl(url: URL): boolean {\n    return url.protocol === 'https:';\n  }\n\n  get provider(): string {\n    return this.config.provider;\n  }\n\n  get supportedUrls() {\n    return this.config.supportedUrls?.() ?? {};\n  }\n\n  private async getArgs({\n    prompt,\n    maxOutputTokens = 4096, // 4096: max model output tokens TODO update default in v5\n    temperature,\n    topP,\n    topK,\n    frequencyPenalty,\n    presencePenalty,\n    stopSequences,\n    responseFormat,\n    seed,\n    tools,\n    toolChoice,\n    providerOptions,\n  }: Parameters<LanguageModelV2['doGenerate']>[0]) {\n    const warnings: LanguageModelV2CallWarning[] = [];\n\n    if (frequencyPenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'frequencyPenalty',\n      });\n    }\n\n    if (presencePenalty != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'presencePenalty',\n      });\n    }\n\n    if (seed != null) {\n      warnings.push({\n        type: 'unsupported-setting',\n        setting: 'seed',\n      });\n    }\n\n    if (responseFormat?.type === 'json') {\n      if (responseFormat.schema == null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'responseFormat',\n          details:\n            'JSON response format requires a schema. ' +\n            'The response format is ignored.',\n        });\n      } else if (tools != null) {\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'tools',\n          details:\n            'JSON response format does not support tools. ' +\n            'The provided tools are ignored.',\n        });\n      }\n    }\n\n    const jsonResponseTool: LanguageModelV2FunctionTool | undefined =\n      responseFormat?.type === 'json' && responseFormat.schema != null\n        ? {\n            type: 'function',\n            name: 'json',\n            description: 'Respond with a JSON object.',\n            inputSchema: responseFormat.schema,\n          }\n        : undefined;\n\n    const anthropicOptions = await parseProviderOptions({\n      provider: 'anthropic',\n      providerOptions,\n      schema: anthropicProviderOptions,\n    });\n\n    const { prompt: messagesPrompt, betas: messagesBetas } =\n      await convertToAnthropicMessagesPrompt({\n        prompt,\n        sendReasoning: anthropicOptions?.sendReasoning ?? true,\n        warnings,\n      });\n\n    const isThinking = anthropicOptions?.thinking?.type === 'enabled';\n    const thinkingBudget = anthropicOptions?.thinking?.budgetTokens;\n\n    const baseArgs = {\n      // model id:\n      model: this.modelId,\n\n      // standardized settings:\n      max_tokens: maxOutputTokens,\n      temperature,\n      top_k: topK,\n      top_p: topP,\n      stop_sequences: stopSequences,\n\n      // provider specific settings:\n      ...(isThinking && {\n        thinking: { type: 'enabled', budget_tokens: thinkingBudget },\n      }),\n\n      // prompt:\n      system: messagesPrompt.system,\n      messages: messagesPrompt.messages,\n    };\n\n    if (isThinking) {\n      if (thinkingBudget == null) {\n        throw new UnsupportedFunctionalityError({\n          functionality: 'thinking requires a budget',\n        });\n      }\n\n      if (baseArgs.temperature != null) {\n        baseArgs.temperature = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'temperature',\n          details: 'temperature is not supported when thinking is enabled',\n        });\n      }\n\n      if (topK != null) {\n        baseArgs.top_k = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topK',\n          details: 'topK is not supported when thinking is enabled',\n        });\n      }\n\n      if (topP != null) {\n        baseArgs.top_p = undefined;\n        warnings.push({\n          type: 'unsupported-setting',\n          setting: 'topP',\n          details: 'topP is not supported when thinking is enabled',\n        });\n      }\n\n      // adjust max tokens to account for thinking:\n      baseArgs.max_tokens = maxOutputTokens + thinkingBudget;\n    }\n\n    const {\n      tools: anthropicTools,\n      toolChoice: anthropicToolChoice,\n      toolWarnings,\n      betas: toolsBetas,\n    } = prepareTools(\n      jsonResponseTool != null\n        ? {\n            tools: [jsonResponseTool],\n            toolChoice: { type: 'tool', toolName: jsonResponseTool.name },\n            disableParallelToolUse: anthropicOptions?.disableParallelToolUse,\n          }\n        : {\n            tools: tools ?? [],\n            toolChoice,\n            disableParallelToolUse: anthropicOptions?.disableParallelToolUse,\n          },\n    );\n\n    return {\n      args: {\n        ...baseArgs,\n        tools: anthropicTools,\n        tool_choice: anthropicToolChoice,\n      },\n      warnings: [...warnings, ...toolWarnings],\n      betas: new Set([...messagesBetas, ...toolsBetas]),\n      usesJsonResponseTool: jsonResponseTool != null,\n    };\n  }\n\n  private async getHeaders({\n    betas,\n    headers,\n  }: {\n    betas: Set<string>;\n    headers: Record<string, string | undefined> | undefined;\n  }) {\n    return combineHeaders(\n      await resolve(this.config.headers),\n      betas.size > 0 ? { 'anthropic-beta': Array.from(betas).join(',') } : {},\n      headers,\n    );\n  }\n\n  private buildRequestUrl(isStreaming: boolean): string {\n    return (\n      this.config.buildRequestUrl?.(this.config.baseURL, isStreaming) ??\n      `${this.config.baseURL}/messages`\n    );\n  }\n\n  private transformRequestBody(args: Record<string, any>): Record<string, any> {\n    return this.config.transformRequestBody?.(args) ?? args;\n  }\n\n  private extractCitationDocuments(prompt: LanguageModelV2Prompt): Array<{\n    title: string;\n    filename?: string;\n    mediaType: string;\n  }> {\n    const isCitationPart = (part: {\n      type: string;\n      mediaType?: string;\n      providerOptions?: { anthropic?: { citations?: { enabled?: boolean } } };\n    }) => {\n      if (part.type !== 'file') {\n        return false;\n      }\n\n      if (\n        part.mediaType !== 'application/pdf' &&\n        part.mediaType !== 'text/plain'\n      ) {\n        return false;\n      }\n\n      const anthropic = part.providerOptions?.anthropic;\n      const citationsConfig = anthropic?.citations as\n        | { enabled?: boolean }\n        | undefined;\n      return citationsConfig?.enabled ?? false;\n    };\n\n    return prompt\n      .filter(message => message.role === 'user')\n      .flatMap(message => message.content)\n      .filter(isCitationPart)\n      .map(part => {\n        // TypeScript knows this is a file part due to our filter\n        const filePart = part as Extract<typeof part, { type: 'file' }>;\n        return {\n          title: filePart.filename ?? 'Untitled Document',\n          filename: filePart.filename,\n          mediaType: filePart.mediaType,\n        };\n      });\n  }\n\n  async doGenerate(\n    options: Parameters<LanguageModelV2['doGenerate']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doGenerate']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const {\n      responseHeaders,\n      value: response,\n      rawValue: rawResponse,\n    } = await postJsonToApi({\n      url: this.buildRequestUrl(false),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(args),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createJsonResponseHandler(\n        anthropicMessagesResponseSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    const content: Array<LanguageModelV2Content> = [];\n\n    // map response content to content array\n    for (const part of response.content) {\n      switch (part.type) {\n        case 'text': {\n          // when a json response tool is used, the tool call is returned as text,\n          // so we ignore the text content:\n          if (!usesJsonResponseTool) {\n            content.push({ type: 'text', text: part.text });\n\n            // Process citations if present\n            if (part.citations) {\n              for (const citation of part.citations) {\n                processCitation(\n                  citation,\n                  citationDocuments,\n                  this.generateId,\n                  source => content.push(source),\n                );\n              }\n            }\n          }\n          break;\n        }\n        case 'thinking': {\n          content.push({\n            type: 'reasoning',\n            text: part.thinking,\n            providerMetadata: {\n              anthropic: {\n                signature: part.signature,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'redacted_thinking': {\n          content.push({\n            type: 'reasoning',\n            text: '',\n            providerMetadata: {\n              anthropic: {\n                redactedData: part.data,\n              } satisfies AnthropicReasoningMetadata,\n            },\n          });\n          break;\n        }\n        case 'tool_use': {\n          content.push(\n            // when a json response tool is used, the tool call becomes the text:\n            usesJsonResponseTool\n              ? {\n                  type: 'text',\n                  text: JSON.stringify(part.input),\n                }\n              : {\n                  type: 'tool-call',\n                  toolCallId: part.id,\n                  toolName: part.name,\n                  input: JSON.stringify(part.input),\n                },\n          );\n\n          break;\n        }\n        case 'server_tool_use': {\n          if (part.name === 'web_search' || part.name === 'code_execution') {\n            content.push({\n              type: 'tool-call',\n              toolCallId: part.id,\n              toolName: part.name,\n              input: JSON.stringify(part.input),\n              providerExecuted: true,\n            });\n          }\n\n          break;\n        }\n        case 'web_search_tool_result': {\n          if (Array.isArray(part.content)) {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              result: part.content.map(result => ({\n                url: result.url,\n                title: result.title,\n                pageAge: result.page_age ?? null,\n                encryptedContent: result.encrypted_content,\n                type: result.type,\n              })),\n              providerExecuted: true,\n            });\n\n            for (const result of part.content) {\n              content.push({\n                type: 'source',\n                sourceType: 'url',\n                id: this.generateId(),\n                url: result.url,\n                title: result.title,\n                providerMetadata: {\n                  anthropic: {\n                    pageAge: result.page_age ?? null,\n                  },\n                },\n              });\n            }\n          } else {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'web_search',\n              isError: true,\n              result: {\n                type: 'web_search_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n        case 'code_execution_tool_result': {\n          if (part.content.type === 'code_execution_result') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              result: {\n                type: part.content.type,\n                stdout: part.content.stdout,\n                stderr: part.content.stderr,\n                return_code: part.content.return_code,\n              },\n              providerExecuted: true,\n            });\n          } else if (part.content.type === 'code_execution_tool_result_error') {\n            content.push({\n              type: 'tool-result',\n              toolCallId: part.tool_use_id,\n              toolName: 'code_execution',\n              isError: true,\n              result: {\n                type: 'code_execution_tool_result_error',\n                errorCode: part.content.error_code,\n              },\n              providerExecuted: true,\n            });\n          }\n          break;\n        }\n      }\n    }\n\n    return {\n      content,\n      finishReason: mapAnthropicStopReason({\n        finishReason: response.stop_reason,\n        isJsonResponseFromTool: usesJsonResponseTool,\n      }),\n      usage: {\n        inputTokens: response.usage.input_tokens,\n        outputTokens: response.usage.output_tokens,\n        totalTokens: response.usage.input_tokens + response.usage.output_tokens,\n        cachedInputTokens: response.usage.cache_read_input_tokens ?? undefined,\n      },\n      request: { body: args },\n      response: {\n        id: response.id ?? undefined,\n        modelId: response.model ?? undefined,\n        headers: responseHeaders,\n        body: rawResponse,\n      },\n      warnings,\n      providerMetadata: {\n        anthropic: {\n          usage: response.usage as JSONObject,\n          cacheCreationInputTokens:\n            response.usage.cache_creation_input_tokens ?? null,\n        },\n      },\n    };\n  }\n\n  async doStream(\n    options: Parameters<LanguageModelV2['doStream']>[0],\n  ): Promise<Awaited<ReturnType<LanguageModelV2['doStream']>>> {\n    const { args, warnings, betas, usesJsonResponseTool } =\n      await this.getArgs(options);\n\n    // Extract citation documents for response processing\n    const citationDocuments = this.extractCitationDocuments(options.prompt);\n\n    const body = { ...args, stream: true };\n\n    const { responseHeaders, value: response } = await postJsonToApi({\n      url: this.buildRequestUrl(true),\n      headers: await this.getHeaders({ betas, headers: options.headers }),\n      body: this.transformRequestBody(body),\n      failedResponseHandler: anthropicFailedResponseHandler,\n      successfulResponseHandler: createEventSourceResponseHandler(\n        anthropicMessagesChunkSchema,\n      ),\n      abortSignal: options.abortSignal,\n      fetch: this.config.fetch,\n    });\n\n    let finishReason: LanguageModelV2FinishReason = 'unknown';\n    const usage: LanguageModelV2Usage = {\n      inputTokens: undefined,\n      outputTokens: undefined,\n      totalTokens: undefined,\n    };\n\n    const contentBlocks: Record<\n      number,\n      | {\n          type: 'tool-call';\n          toolCallId: string;\n          toolName: string;\n          input: string;\n          providerExecuted?: boolean;\n        }\n      | { type: 'text' | 'reasoning' }\n    > = {};\n\n    let providerMetadata: AnthropicProviderMetadata | undefined = undefined;\n\n    let blockType:\n      | 'text'\n      | 'thinking'\n      | 'tool_use'\n      | 'redacted_thinking'\n      | 'server_tool_use'\n      | 'web_search_tool_result'\n      | 'code_execution_tool_result'\n      | undefined = undefined;\n\n    const generateId = this.generateId;\n\n    return {\n      stream: response.pipeThrough(\n        new TransformStream<\n          ParseResult<z.infer<typeof anthropicMessagesChunkSchema>>,\n          LanguageModelV2StreamPart\n        >({\n          start(controller) {\n            controller.enqueue({ type: 'stream-start', warnings });\n          },\n\n          transform(chunk, controller) {\n            if (options.includeRawChunks) {\n              controller.enqueue({ type: 'raw', rawValue: chunk.rawValue });\n            }\n\n            if (!chunk.success) {\n              controller.enqueue({ type: 'error', error: chunk.error });\n              return;\n            }\n\n            const value = chunk.value;\n\n            switch (value.type) {\n              case 'ping': {\n                return; // ignored\n              }\n\n              case 'content_block_start': {\n                const contentBlockType = value.content_block.type;\n\n                blockType = contentBlockType;\n\n                switch (contentBlockType) {\n                  case 'text': {\n                    contentBlocks[value.index] = { type: 'text' };\n                    controller.enqueue({\n                      type: 'text-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                    });\n                    return;\n                  }\n\n                  case 'redacted_thinking': {\n                    contentBlocks[value.index] = { type: 'reasoning' };\n                    controller.enqueue({\n                      type: 'reasoning-start',\n                      id: String(value.index),\n                      providerMetadata: {\n                        anthropic: {\n                          redactedData: value.content_block.data,\n                        } satisfies AnthropicReasoningMetadata,\n                      },\n                    });\n                    return;\n                  }\n\n                  case 'tool_use': {\n                    contentBlocks[value.index] = usesJsonResponseTool\n                      ? { type: 'text' }\n                      : {\n                          type: 'tool-call',\n                          toolCallId: value.content_block.id,\n                          toolName: value.content_block.name,\n                          input: '',\n                        };\n\n                    controller.enqueue(\n                      usesJsonResponseTool\n                        ? { type: 'text-start', id: String(value.index) }\n                        : {\n                            type: 'tool-input-start',\n                            id: value.content_block.id,\n                            toolName: value.content_block.name,\n                          },\n                    );\n                    return;\n                  }\n\n                  case 'server_tool_use': {\n                    if (\n                      value.content_block.name === 'web_search' ||\n                      value.content_block.name === 'code_execution'\n                    ) {\n                      contentBlocks[value.index] = {\n                        type: 'tool-call',\n                        toolCallId: value.content_block.id,\n                        toolName: value.content_block.name,\n                        input: '',\n                        providerExecuted: true,\n                      };\n                      controller.enqueue({\n                        type: 'tool-input-start',\n                        id: value.content_block.id,\n                        toolName: value.content_block.name,\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'web_search_tool_result': {\n                    const part = value.content_block;\n\n                    if (Array.isArray(part.content)) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        result: part.content.map(result => ({\n                          url: result.url,\n                          title: result.title,\n                          pageAge: result.page_age ?? null,\n                          encryptedContent: result.encrypted_content,\n                          type: result.type,\n                        })),\n                        providerExecuted: true,\n                      });\n\n                      for (const result of part.content) {\n                        controller.enqueue({\n                          type: 'source',\n                          sourceType: 'url',\n                          id: generateId(),\n                          url: result.url,\n                          title: result.title,\n                          providerMetadata: {\n                            anthropic: {\n                              pageAge: result.page_age ?? null,\n                            },\n                          },\n                        });\n                      }\n                    } else {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'web_search',\n                        isError: true,\n                        result: {\n                          type: 'web_search_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n                    return;\n                  }\n\n                  case 'code_execution_tool_result': {\n                    const part = value.content_block;\n\n                    if (part.content.type === 'code_execution_result') {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        result: {\n                          type: part.content.type,\n                          stdout: part.content.stdout,\n                          stderr: part.content.stderr,\n                          return_code: part.content.return_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    } else if (\n                      part.content.type === 'code_execution_tool_result_error'\n                    ) {\n                      controller.enqueue({\n                        type: 'tool-result',\n                        toolCallId: part.tool_use_id,\n                        toolName: 'code_execution',\n                        isError: true,\n                        result: {\n                          type: 'code_execution_tool_result_error',\n                          errorCode: part.content.error_code,\n                        },\n                        providerExecuted: true,\n                      });\n                    }\n\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = contentBlockType;\n                    throw new Error(\n                      `Unsupported content block type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'content_block_stop': {\n                // when finishing a tool call block, send the full tool call:\n                if (contentBlocks[value.index] != null) {\n                  const contentBlock = contentBlocks[value.index];\n\n                  switch (contentBlock.type) {\n                    case 'text': {\n                      controller.enqueue({\n                        type: 'text-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'reasoning': {\n                      controller.enqueue({\n                        type: 'reasoning-end',\n                        id: String(value.index),\n                      });\n                      break;\n                    }\n\n                    case 'tool-call':\n                      // when a json response tool is used, the tool call is returned as text,\n                      // so we ignore the tool call content:\n                      if (!usesJsonResponseTool) {\n                        controller.enqueue({\n                          type: 'tool-input-end',\n                          id: contentBlock.toolCallId,\n                        });\n                        controller.enqueue(contentBlock);\n                      }\n                      break;\n                  }\n\n                  delete contentBlocks[value.index];\n                }\n\n                blockType = undefined; // reset block type\n\n                return;\n              }\n\n              case 'content_block_delta': {\n                const deltaType = value.delta.type;\n                switch (deltaType) {\n                  case 'text_delta': {\n                    // when a json response tool is used, the tool call is returned as text,\n                    // so we ignore the text content:\n                    if (usesJsonResponseTool) {\n                      return;\n                    }\n\n                    controller.enqueue({\n                      type: 'text-delta',\n                      id: String(value.index),\n                      delta: value.delta.text,\n                    });\n\n                    return;\n                  }\n\n                  case 'thinking_delta': {\n                    controller.enqueue({\n                      type: 'reasoning-delta',\n                      id: String(value.index),\n                      delta: value.delta.thinking,\n                    });\n\n                    return;\n                  }\n\n                  case 'signature_delta': {\n                    // signature are only supported on thinking blocks:\n                    if (blockType === 'thinking') {\n                      controller.enqueue({\n                        type: 'reasoning-delta',\n                        id: String(value.index),\n                        delta: '',\n                        providerMetadata: {\n                          anthropic: {\n                            signature: value.delta.signature,\n                          } satisfies AnthropicReasoningMetadata,\n                        },\n                      });\n                    }\n\n                    return;\n                  }\n\n                  case 'input_json_delta': {\n                    const contentBlock = contentBlocks[value.index];\n                    const delta = value.delta.partial_json;\n\n                    if (usesJsonResponseTool) {\n                      if (contentBlock?.type !== 'text') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'text-delta',\n                        id: String(value.index),\n                        delta,\n                      });\n                    } else {\n                      if (contentBlock?.type !== 'tool-call') {\n                        return;\n                      }\n\n                      controller.enqueue({\n                        type: 'tool-input-delta',\n                        id: contentBlock.toolCallId,\n                        delta,\n                      });\n\n                      contentBlock.input += delta;\n                    }\n\n                    return;\n                  }\n\n                  case 'citations_delta': {\n                    const citation = value.delta.citation;\n\n                    processCitation(\n                      citation,\n                      citationDocuments,\n                      generateId,\n                      source => controller.enqueue(source),\n                    );\n                    // Web search citations are handled in web_search_tool_result content block\n                    return;\n                  }\n\n                  default: {\n                    const _exhaustiveCheck: never = deltaType;\n                    throw new Error(\n                      `Unsupported delta type: ${_exhaustiveCheck}`,\n                    );\n                  }\n                }\n              }\n\n              case 'message_start': {\n                usage.inputTokens = value.message.usage.input_tokens;\n                usage.cachedInputTokens =\n                  value.message.usage.cache_read_input_tokens ?? undefined;\n\n                providerMetadata = {\n                  anthropic: {\n                    usage: value.message.usage as JSONObject,\n                    cacheCreationInputTokens:\n                      value.message.usage.cache_creation_input_tokens ?? null,\n                  },\n                };\n\n                controller.enqueue({\n                  type: 'response-metadata',\n                  id: value.message.id ?? undefined,\n                  modelId: value.message.model ?? undefined,\n                });\n\n                return;\n              }\n\n              case 'message_delta': {\n                usage.outputTokens = value.usage.output_tokens;\n                usage.totalTokens =\n                  (usage.inputTokens ?? 0) + (value.usage.output_tokens ?? 0);\n\n                finishReason = mapAnthropicStopReason({\n                  finishReason: value.delta.stop_reason,\n                  isJsonResponseFromTool: usesJsonResponseTool,\n                });\n                return;\n              }\n\n              case 'message_stop': {\n                controller.enqueue({\n                  type: 'finish',\n                  finishReason,\n                  usage,\n                  providerMetadata,\n                });\n                return;\n              }\n\n              case 'error': {\n                controller.enqueue({ type: 'error', error: value.error });\n                return;\n              }\n\n              default: {\n                const _exhaustiveCheck: never = value;\n                throw new Error(`Unsupported chunk type: ${_exhaustiveCheck}`);\n              }\n            }\n          },\n        }),\n      ),\n      request: { body },\n      response: { headers: responseHeaders },\n    };\n  }\n}\n\n// limited version of the schema, focussed on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst anthropicMessagesResponseSchema = z.object({\n  type: z.literal('message'),\n  id: z.string().nullish(),\n  model: z.string().nullish(),\n  content: z.array(\n    z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('text'),\n        text: z.string(),\n        citations: z.array(citationSchema).optional(),\n      }),\n      z.object({\n        type: z.literal('thinking'),\n        thinking: z.string(),\n        signature: z.string(),\n      }),\n      z.object({\n        type: z.literal('redacted_thinking'),\n        data: z.string(),\n      }),\n      z.object({\n        type: z.literal('tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.unknown(),\n      }),\n      z.object({\n        type: z.literal('server_tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.record(z.string(), z.unknown()).nullish(),\n      }),\n      z.object({\n        type: z.literal('web_search_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.array(\n            z.object({\n              type: z.literal('web_search_result'),\n              url: z.string(),\n              title: z.string(),\n              encrypted_content: z.string(),\n              page_age: z.string().nullish(),\n            }),\n          ),\n          z.object({\n            type: z.literal('web_search_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('code_execution_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.object({\n            type: z.literal('code_execution_result'),\n            stdout: z.string(),\n            stderr: z.string(),\n            return_code: z.number(),\n          }),\n          z.object({\n            type: z.literal('code_execution_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n    ]),\n  ),\n  stop_reason: z.string().nullish(),\n  usage: z.looseObject({\n    input_tokens: z.number(),\n    output_tokens: z.number(),\n    cache_creation_input_tokens: z.number().nullish(),\n    cache_read_input_tokens: z.number().nullish(),\n  }),\n});\n\n// limited version of the schema, focused on what is needed for the implementation\n// this approach limits breakages when the API changes and increases efficiency\nconst anthropicMessagesChunkSchema = z.discriminatedUnion('type', [\n  z.object({\n    type: z.literal('message_start'),\n    message: z.object({\n      id: z.string().nullish(),\n      model: z.string().nullish(),\n      usage: z.looseObject({\n        input_tokens: z.number(),\n        output_tokens: z.number(),\n        cache_creation_input_tokens: z.number().nullish(),\n        cache_read_input_tokens: z.number().nullish(),\n      }),\n    }),\n  }),\n  z.object({\n    type: z.literal('content_block_start'),\n    index: z.number(),\n    content_block: z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('text'),\n        text: z.string(),\n      }),\n      z.object({\n        type: z.literal('thinking'),\n        thinking: z.string(),\n      }),\n      z.object({\n        type: z.literal('tool_use'),\n        id: z.string(),\n        name: z.string(),\n      }),\n      z.object({\n        type: z.literal('redacted_thinking'),\n        data: z.string(),\n      }),\n      z.object({\n        type: z.literal('server_tool_use'),\n        id: z.string(),\n        name: z.string(),\n        input: z.record(z.string(), z.unknown()).nullish(),\n      }),\n      z.object({\n        type: z.literal('web_search_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.array(\n            z.object({\n              type: z.literal('web_search_result'),\n              url: z.string(),\n              title: z.string(),\n              encrypted_content: z.string(),\n              page_age: z.string().nullish(),\n            }),\n          ),\n          z.object({\n            type: z.literal('web_search_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n      z.object({\n        type: z.literal('code_execution_tool_result'),\n        tool_use_id: z.string(),\n        content: z.union([\n          z.object({\n            type: z.literal('code_execution_result'),\n            stdout: z.string(),\n            stderr: z.string(),\n            return_code: z.number(),\n          }),\n          z.object({\n            type: z.literal('code_execution_tool_result_error'),\n            error_code: z.string(),\n          }),\n        ]),\n      }),\n    ]),\n  }),\n  z.object({\n    type: z.literal('content_block_delta'),\n    index: z.number(),\n    delta: z.discriminatedUnion('type', [\n      z.object({\n        type: z.literal('input_json_delta'),\n        partial_json: z.string(),\n      }),\n      z.object({\n        type: z.literal('text_delta'),\n        text: z.string(),\n      }),\n      z.object({\n        type: z.literal('thinking_delta'),\n        thinking: z.string(),\n      }),\n      z.object({\n        type: z.literal('signature_delta'),\n        signature: z.string(),\n      }),\n      z.object({\n        type: z.literal('citations_delta'),\n        citation: citationSchema,\n      }),\n    ]),\n  }),\n  z.object({\n    type: z.literal('content_block_stop'),\n    index: z.number(),\n  }),\n  z.object({\n    type: z.literal('error'),\n    error: z.object({\n      type: z.string(),\n      message: z.string(),\n    }),\n  }),\n  z.object({\n    type: z.literal('message_delta'),\n    delta: z.object({ stop_reason: z.string().nullish() }),\n    usage: z.object({ output_tokens: z.number() }),\n  }),\n  z.object({\n    type: z.literal('message_stop'),\n  }),\n  z.object({\n    type: z.literal('ping'),\n  }),\n]);\n\nexport const anthropicReasoningMetadataSchema = z.object({\n  signature: z.string().optional(),\n  redactedData: z.string().optional(),\n});\n\nexport type AnthropicReasoningMetadata = z.infer<\n  typeof anthropicReasoningMetadataSchema\n>;\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport z from 'zod/v4';\n\nexport const bash_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20241022',\n  name: 'bash',\n  inputSchema: z.object({\n    command: z.string(),\n    restart: z.boolean().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport z from 'zod/v4';\n\nexport const bash_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The bash command to run. Required unless the tool is being restarted.\n     */\n    command: string;\n\n    /**\n     * Specifying true will restart this tool. Otherwise, leave this unspecified.\n     */\n    restart?: boolean;\n  },\n  {}\n>({\n  id: 'anthropic.bash_20250124',\n  name: 'bash',\n  inputSchema: z.object({\n    command: z.string(),\n    restart: z.boolean().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const computer_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The action to perform. The available actions are:\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_click`: Click the left mouse button.\n     * - `left_click_drag`: Click and drag the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button.\n     * - `middle_click`: Click the middle mouse button.\n     * - `double_click`: Double-click the left mouse button.\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'type'\n      | 'mouse_move'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'screenshot'\n      | 'cursor_position';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: number[];\n\n    /**\n     * Required only by `action=type` and `action=key`.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20241022',\n  name: 'computer',\n  inputSchema: z.object({\n    action: z.enum([\n      'key',\n      'type',\n      'mouse_move',\n      'left_click',\n      'left_click_drag',\n      'right_click',\n      'middle_click',\n      'double_click',\n      'screenshot',\n      'cursor_position',\n    ]),\n    coordinate: z.array(z.number().int()).optional(),\n    text: z.string().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const computer_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * - `key`: Press a key or key-combination on the keyboard.\n     *   - This supports xdotool's `key` syntax.\n     *   - Examples: \"a\", \"Return\", \"alt+Tab\", \"ctrl+s\", \"Up\", \"KP_0\" (for the numpad 0 key).\n     * - `hold_key`: Hold down a key or multiple keys for a specified duration (in seconds). Supports the same syntax as `key`.\n     * - `type`: Type a string of text on the keyboard.\n     * - `cursor_position`: Get the current (x, y) pixel coordinate of the cursor on the screen.\n     * - `mouse_move`: Move the cursor to a specified (x, y) pixel coordinate on the screen.\n     * - `left_mouse_down`: Press the left mouse button.\n     * - `left_mouse_up`: Release the left mouse button.\n     * - `left_click`: Click the left mouse button at the specified (x, y) pixel coordinate on the screen. You can also include a key combination to hold down while clicking using the `text` parameter.\n     * - `left_click_drag`: Click and drag the cursor from `start_coordinate` to a specified (x, y) pixel coordinate on the screen.\n     * - `right_click`: Click the right mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `middle_click`: Click the middle mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `double_click`: Double-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `triple_click`: Triple-click the left mouse button at the specified (x, y) pixel coordinate on the screen.\n     * - `scroll`: Scroll the screen in a specified direction by a specified amount of clicks of the scroll wheel, at the specified (x, y) pixel coordinate. DO NOT use PageUp/PageDown to scroll.\n     * - `wait`: Wait for a specified duration (in seconds).\n     * - `screenshot`: Take a screenshot of the screen.\n     */\n    action:\n      | 'key'\n      | 'hold_key'\n      | 'type'\n      | 'cursor_position'\n      | 'mouse_move'\n      | 'left_mouse_down'\n      | 'left_mouse_up'\n      | 'left_click'\n      | 'left_click_drag'\n      | 'right_click'\n      | 'middle_click'\n      | 'double_click'\n      | 'triple_click'\n      | 'scroll'\n      | 'wait'\n      | 'screenshot';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to move the mouse to. Required only by `action=mouse_move` and `action=left_click_drag`.\n     */\n    coordinate?: [number, number];\n\n    /**\n     * The duration to hold the key down for. Required only by `action=hold_key` and `action=wait`.\n     */\n    duration?: number;\n\n    /**\n     * The number of 'clicks' to scroll. Required only by `action=scroll`.\n     */\n    scroll_amount?: number;\n\n    /**\n     * The direction to scroll the screen. Required only by `action=scroll`.\n     */\n    scroll_direction?: 'up' | 'down' | 'left' | 'right';\n\n    /**\n     * (x, y): The x (pixels from the left edge) and y (pixels from the top edge) coordinates to start the drag from. Required only by `action=left_click_drag`.\n     */\n    start_coordinate?: [number, number];\n\n    /**\n     * Required only by `action=type`, `action=key`, and `action=hold_key`. Can also be used by click or scroll actions to hold down keys while clicking or scrolling.\n     */\n    text?: string;\n  },\n  {\n    /**\n     * The width of the display being controlled by the model in pixels.\n     */\n    displayWidthPx: number;\n\n    /**\n     * The height of the display being controlled by the model in pixels.\n     */\n    displayHeightPx: number;\n\n    /**\n     * The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n     */\n    displayNumber?: number;\n  }\n>({\n  id: 'anthropic.computer_20250124',\n  name: 'computer',\n  inputSchema: z.object({\n    action: z.enum([\n      'key',\n      'hold_key',\n      'type',\n      'cursor_position',\n      'mouse_move',\n      'left_mouse_down',\n      'left_mouse_up',\n      'left_click',\n      'left_click_drag',\n      'right_click',\n      'middle_click',\n      'double_click',\n      'triple_click',\n      'scroll',\n      'wait',\n      'screenshot',\n    ]),\n    coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n    duration: z.number().optional(),\n    scroll_amount: z.number().optional(),\n    scroll_direction: z.enum(['up', 'down', 'left', 'right']).optional(),\n    start_coordinate: z.tuple([z.number().int(), z.number().int()]).optional(),\n    text: z.string().optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20241022 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20241022',\n  name: 'str_replace_editor',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20250124 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`, `undo_edit`.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert' | 'undo_edit';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250124',\n  name: 'str_replace_editor',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert', 'undo_edit']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { createProviderDefinedToolFactory } from '@ai-sdk/provider-utils';\nimport { z } from 'zod/v4';\n\nexport const textEditor_20250429 = createProviderDefinedToolFactory<\n  {\n    /**\n     * The commands to run. Allowed options are: `view`, `create`, `str_replace`, `insert`.\n     * Note: `undo_edit` is not supported in Claude 4 models.\n     */\n    command: 'view' | 'create' | 'str_replace' | 'insert';\n\n    /**\n     * Absolute path to file or directory, e.g. `/repo/file.py` or `/repo`.\n     */\n    path: string;\n\n    /**\n     * Required parameter of `create` command, with the content of the file to be created.\n     */\n    file_text?: string;\n\n    /**\n     * Required parameter of `insert` command. The `new_str` will be inserted AFTER the line `insert_line` of `path`.\n     */\n    insert_line?: number;\n\n    /**\n     * Optional parameter of `str_replace` command containing the new string (if not given, no string will be added). Required parameter of `insert` command containing the string to insert.\n     */\n    new_str?: string;\n\n    /**\n     * Required parameter of `str_replace` command containing the string in `path` to replace.\n     */\n    old_str?: string;\n\n    /**\n     * Optional parameter of `view` command when `path` points to a file. If none is given, the full file is shown. If provided, the file will be shown in the indicated line number range, e.g. [11, 12] will show lines 11 and 12. Indexing at 1 to start. Setting `[start_line, -1]` shows all lines from `start_line` to the end of the file.\n     */\n    view_range?: number[];\n  },\n  {}\n>({\n  id: 'anthropic.text_editor_20250429',\n  name: 'str_replace_based_edit_tool',\n  inputSchema: z.object({\n    command: z.enum(['view', 'create', 'str_replace', 'insert']),\n    path: z.string(),\n    file_text: z.string().optional(),\n    insert_line: z.number().int().optional(),\n    new_str: z.string().optional(),\n    old_str: z.string().optional(),\n    view_range: z.array(z.number().int()).optional(),\n  }),\n});\n","import { bash_20241022 } from './tool/bash_20241022';\nimport { bash_20250124 } from './tool/bash_20250124';\nimport { computer_20241022 } from './tool/computer_20241022';\nimport { computer_20250124 } from './tool/computer_20250124';\nimport { textEditor_20241022 } from './tool/text-editor_20241022';\nimport { textEditor_20250124 } from './tool/text-editor_20250124';\nimport { textEditor_20250429 } from './tool/text-editor_20250429';\nimport { webSearch_20250305 } from './tool/web-search_20250305';\nimport { codeExecution_20250522 } from './tool/code-execution_20250522';\n\nexport const anthropicTools = {\n  /**\n   * Creates a tool for running a bash command. Must have name \"bash\".\n   *\n   * Image results are supported.\n   *\n   * @param execute - The function to execute the tool. Optional.\n   */\n  bash_20241022,\n\n  /**\n   * Creates a tool for running a bash command. Must have name \"bash\".\n   *\n   * Image results are supported.\n   *\n   * @param execute - The function to execute the tool. Optional.\n   */\n  bash_20250124,\n\n  /**\n   * Creates a tool for editing text. Must have name \"str_replace_editor\".\n   */\n  textEditor_20241022,\n\n  /**\n   * Creates a tool for editing text. Must have name \"str_replace_editor\".\n   */\n  textEditor_20250124,\n\n  /**\n   * Creates a tool for editing text. Must have name \"str_replace_based_edit_tool\".\n   * Note: This version does not support the \"undo_edit\" command.\n   */\n  textEditor_20250429,\n\n  /**\n   * Creates a tool for executing actions on a computer. Must have name \"computer\".\n   *\n   * Image results are supported.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   */\n  computer_20241022,\n\n  /**\n   * Creates a tool for executing actions on a computer. Must have name \"computer\".\n   *\n   * Image results are supported.\n   *\n   * @param displayWidthPx - The width of the display being controlled by the model in pixels.\n   * @param displayHeightPx - The height of the display being controlled by the model in pixels.\n   * @param displayNumber - The display number to control (only relevant for X11 environments). If specified, the tool will be provided a display number in the tool definition.\n   * @param execute - The function to execute the tool. Optional.\n   */\n  computer_20250124,\n\n  /**\n   * Creates a web search tool that gives Claude direct access to real-time web content.\n   * Must have name \"web_search\".\n   *\n   * @param maxUses - Maximum number of web searches Claude can perform during the conversation.\n   * @param allowedDomains - Optional list of domains that Claude is allowed to search.\n   * @param blockedDomains - Optional list of domains that Claude should avoid when searching.\n   * @param userLocation - Optional user location information to provide geographically relevant search results.\n   */\n  webSearch_20250305,\n\n  /**\n   * Creates a tool for executing Python code. Must have name \"code_execution\".\n   */\n  codeExecution_20250522,\n};\n","import {\n  LanguageModelV2,\n  NoSuchModelError,\n  ProviderV2,\n} from '@ai-sdk/provider';\nimport {\n  FetchFunction,\n  generateId,\n  loadApiKey,\n  withoutTrailingSlash,\n} from '@ai-sdk/provider-utils';\nimport { AnthropicMessagesLanguageModel } from './anthropic-messages-language-model';\nimport { AnthropicMessagesModelId } from './anthropic-messages-options';\nimport { anthropicTools } from './anthropic-tools';\n\nexport interface AnthropicProvider extends ProviderV2 {\n  /**\nCreates a model for text generation.\n*/\n  (modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  /**\nCreates a model for text generation.\n*/\n  languageModel(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  chat(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  messages(modelId: AnthropicMessagesModelId): LanguageModelV2;\n\n  /**\nAnthropic-specific computer use tool.\n   */\n  tools: typeof anthropicTools;\n}\n\nexport interface AnthropicProviderSettings {\n  /**\nUse a different URL prefix for API calls, e.g. to use proxy servers.\nThe default prefix is `https://api.anthropic.com/v1`.\n   */\n  baseURL?: string;\n\n  /**\nAPI key that is being send using the `x-api-key` header.\nIt defaults to the `ANTHROPIC_API_KEY` environment variable.\n   */\n  apiKey?: string;\n\n  /**\nCustom headers to include in the requests.\n     */\n  headers?: Record<string, string>;\n\n  /**\nCustom fetch implementation. You can use it as a middleware to intercept requests,\nor to provide a custom fetch implementation for e.g. testing.\n    */\n  fetch?: FetchFunction;\n\n  generateId?: () => string;\n}\n\n/**\nCreate an Anthropic provider instance.\n */\nexport function createAnthropic(\n  options: AnthropicProviderSettings = {},\n): AnthropicProvider {\n  const baseURL =\n    withoutTrailingSlash(options.baseURL) ?? 'https://api.anthropic.com/v1';\n\n  const getHeaders = () => ({\n    'anthropic-version': '2023-06-01',\n    'x-api-key': loadApiKey({\n      apiKey: options.apiKey,\n      environmentVariableName: 'ANTHROPIC_API_KEY',\n      description: 'Anthropic',\n    }),\n    ...options.headers,\n  });\n\n  const createChatModel = (modelId: AnthropicMessagesModelId) =>\n    new AnthropicMessagesLanguageModel(modelId, {\n      provider: 'anthropic.messages',\n      baseURL,\n      headers: getHeaders,\n      fetch: options.fetch,\n      generateId: options.generateId ?? generateId,\n      supportedUrls: () => ({\n        'image/*': [/^https?:\\/\\/.*$/],\n      }),\n    });\n\n  const provider = function (modelId: AnthropicMessagesModelId) {\n    if (new.target) {\n      throw new Error(\n        'The Anthropic model function cannot be called with the new keyword.',\n      );\n    }\n\n    return createChatModel(modelId);\n  };\n\n  provider.languageModel = createChatModel;\n  provider.chat = createChatModel;\n  provider.messages = createChatModel;\n\n  provider.textEmbeddingModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'textEmbeddingModel' });\n  };\n  provider.imageModel = (modelId: string) => {\n    throw new NoSuchModelError({ modelId, modelType: 'imageModel' });\n  };\n\n  provider.tools = anthropicTools;\n\n  return provider;\n}\n\n/**\nDefault Anthropic provider instance.\n */\nexport const anthropic = createAnthropic();\n"]}