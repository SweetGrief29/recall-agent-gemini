import { xai as xai$1 } from './chunk-P7CIEIJ3.js';
import { google as google$1 } from './chunk-FQNT7PI4.js';
import { anthropic } from './chunk-RCHEPTZZ.js';
import { groq } from './chunk-EMNGA4R4.js';
import { xai } from './chunk-IOQGI4ML.js';
import { google } from './chunk-OGW6HHVI.js';
import { anthropic as anthropic$1 } from './chunk-LYPU75T6.js';
import { groq as groq$1 } from './chunk-66YYHFGF.js';
import { sanitizeBody, validateBody } from './chunk-4QCXUEAT.js';
import { openai } from './chunk-4RRMWXQ2.js';
import { openai as openai$1 } from './chunk-6GMFZ5LK.js';
import { stringify } from './chunk-LF2ZLOFP.js';
import { handleError } from './chunk-CY4TP3FK.js';
import { HTTPException } from './chunk-MMROOK5J.js';
import { __export } from './chunk-G3PMV62Z.js';
import { RuntimeContext } from '@mastra/core/runtime-context';
import { zodToJsonSchema } from '@mastra/core/utils/zod-to-json';

// src/server/handlers/agents.ts
var agents_exports = {};
__export(agents_exports, {
  generateHandler: () => generateHandler,
  generateLegacyHandler: () => generateLegacyHandler,
  generateVNextHandler: () => generateVNextHandler,
  getAgentByIdHandler: () => getAgentByIdHandler,
  getAgentsHandler: () => getAgentsHandler,
  getEvalsByAgentIdHandler: () => getEvalsByAgentIdHandler,
  getLiveEvalsByAgentIdHandler: () => getLiveEvalsByAgentIdHandler,
  getSerializedAgentTools: () => getSerializedAgentTools,
  streamGenerateHandler: () => streamGenerateHandler,
  streamGenerateLegacyHandler: () => streamGenerateLegacyHandler,
  streamNetworkHandler: () => streamNetworkHandler,
  streamVNextGenerateHandler: () => streamVNextGenerateHandler,
  streamVNextUIMessageHandler: () => streamVNextUIMessageHandler,
  updateAgentModelHandler: () => updateAgentModelHandler
});
async function getSerializedAgentTools(tools) {
  return Object.entries(tools || {}).reduce((acc, [key, tool]) => {
    const _tool = tool;
    const toolId = _tool.id ?? `tool-${key}`;
    let inputSchemaForReturn = void 0;
    if (_tool.inputSchema) {
      if (_tool.inputSchema?.jsonSchema) {
        inputSchemaForReturn = stringify(_tool.inputSchema.jsonSchema);
      } else {
        inputSchemaForReturn = stringify(zodToJsonSchema(_tool.inputSchema));
      }
    }
    let outputSchemaForReturn = void 0;
    if (_tool.outputSchema) {
      if (_tool.outputSchema?.jsonSchema) {
        outputSchemaForReturn = stringify(_tool.outputSchema.jsonSchema);
      } else {
        outputSchemaForReturn = stringify(zodToJsonSchema(_tool.outputSchema));
      }
    }
    acc[key] = {
      ..._tool,
      id: toolId,
      inputSchema: inputSchemaForReturn,
      outputSchema: outputSchemaForReturn
    };
    return acc;
  }, {});
}
async function getSerializedAgentDefinition({
  agent,
  runtimeContext
}) {
  let serializedAgentAgents = {};
  if ("listAgents" in agent) {
    const agents = await agent.listAgents({ runtimeContext });
    serializedAgentAgents = Object.entries(agents || {}).reduce((acc, [key, agent2]) => {
      return {
        ...acc,
        [key]: { id: agent2.id, name: agent2.name }
      };
    }, {});
  }
  return serializedAgentAgents;
}
async function formatAgentList({
  id,
  mastra,
  agent,
  runtimeContext
}) {
  const instructions = await agent.getInstructions({ runtimeContext });
  const tools = await agent.getTools({ runtimeContext });
  const llm = await agent.getLLM({ runtimeContext });
  const defaultGenerateOptions = await agent.getDefaultGenerateOptions({ runtimeContext });
  const defaultStreamOptions = await agent.getDefaultStreamOptions({ runtimeContext });
  const serializedAgentTools = await getSerializedAgentTools(tools);
  let serializedAgentWorkflows = {};
  if ("getWorkflows" in agent) {
    const logger = mastra.getLogger();
    try {
      const workflows = await agent.getWorkflows({ runtimeContext });
      serializedAgentWorkflows = Object.entries(workflows || {}).reduce((acc, [key, workflow]) => {
        return {
          ...acc,
          [key]: {
            name: workflow.name
          }
        };
      }, {});
    } catch (error) {
      logger.error("Error getting workflows for agent", { agentName: agent.name, error });
    }
  }
  const serializedAgentAgents = await getSerializedAgentDefinition({ agent, runtimeContext });
  const model = llm?.getModel();
  return {
    id,
    name: agent.name,
    instructions,
    agents: serializedAgentAgents,
    tools: serializedAgentTools,
    workflows: serializedAgentWorkflows,
    provider: llm?.getProvider(),
    modelId: llm?.getModelId(),
    modelVersion: model?.specificationVersion,
    defaultGenerateOptions,
    defaultStreamOptions
  };
}
async function getAgentsHandler({ mastra, runtimeContext }) {
  try {
    const agents = mastra.getAgents();
    const serializedAgentsMap = await Promise.all(
      Object.entries(agents).map(async ([id, agent]) => {
        return formatAgentList({ id, mastra, agent, runtimeContext });
      })
    );
    const serializedAgents = serializedAgentsMap.reduce((acc, { id, ...rest }) => {
      acc[id] = rest;
      return acc;
    }, {});
    return serializedAgents;
  } catch (error) {
    return handleError(error, "Error getting agents");
  }
}
async function formatAgent({
  mastra,
  agent,
  runtimeContext,
  isPlayground
}) {
  const tools = await agent.getTools({ runtimeContext });
  const serializedAgentTools = await getSerializedAgentTools(tools);
  let serializedAgentWorkflows = {};
  if ("getWorkflows" in agent) {
    const logger = mastra.getLogger();
    try {
      const workflows = await agent.getWorkflows({ runtimeContext });
      serializedAgentWorkflows = Object.entries(workflows || {}).reduce((acc, [key, workflow]) => {
        return {
          ...acc,
          [key]: {
            name: workflow.name,
            steps: Object.entries(workflow.steps).reduce((acc2, [key2, step]) => {
              return {
                ...acc2,
                [key2]: {
                  id: step.id,
                  description: step.description
                }
              };
            }, {})
          }
        };
      }, {});
    } catch (error) {
      logger.error("Error getting workflows for agent", { agentName: agent.name, error });
    }
    let proxyRuntimeContext = runtimeContext;
    if (isPlayground) {
      proxyRuntimeContext = new Proxy(runtimeContext, {
        get(target, prop) {
          if (prop === "get") {
            return function(key) {
              const value = target.get(key);
              return value ?? `<${key}>`;
            };
          }
          return Reflect.get(target, prop);
        }
      });
    }
    const instructions = await agent.getInstructions({ runtimeContext: proxyRuntimeContext });
    const llm = await agent.getLLM({ runtimeContext });
    const defaultGenerateOptions = await agent.getDefaultGenerateOptions({ runtimeContext: proxyRuntimeContext });
    const defaultStreamOptions = await agent.getDefaultStreamOptions({ runtimeContext: proxyRuntimeContext });
    const model = llm?.getModel();
    const serializedAgentAgents = await getSerializedAgentDefinition({ agent, runtimeContext: proxyRuntimeContext });
    return {
      name: agent.name,
      instructions,
      tools: serializedAgentTools,
      agents: serializedAgentAgents,
      workflows: serializedAgentWorkflows,
      provider: llm?.getProvider(),
      modelId: llm?.getModelId(),
      modelVersion: model?.specificationVersion,
      defaultGenerateOptions,
      defaultStreamOptions
    };
  }
}
async function getAgentByIdHandler({
  mastra,
  runtimeContext,
  agentId,
  isPlayground = false
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    return formatAgent({ mastra, agent, runtimeContext, isPlayground });
  } catch (error) {
    return handleError(error, "Error getting agent");
  }
}
async function getEvalsByAgentIdHandler({
  mastra,
  runtimeContext,
  agentId
}) {
  try {
    const agent = mastra.getAgent(agentId);
    const evals = await mastra.getStorage()?.getEvalsByAgentName?.(agent.name, "test") || [];
    const instructions = await agent.getInstructions({ runtimeContext });
    return {
      id: agentId,
      name: agent.name,
      instructions,
      evals
    };
  } catch (error) {
    return handleError(error, "Error getting test evals");
  }
}
async function getLiveEvalsByAgentIdHandler({
  mastra,
  runtimeContext,
  agentId
}) {
  try {
    const agent = mastra.getAgent(agentId);
    const evals = await mastra.getStorage()?.getEvalsByAgentName?.(agent.name, "live") || [];
    const instructions = await agent.getInstructions({ runtimeContext });
    return {
      id: agentId,
      name: agent.name,
      instructions,
      evals
    };
  } catch (error) {
    return handleError(error, "Error getting live evals");
  }
}
function generateHandler({
  mastra,
  ...args
}) {
  const logger = mastra.getLogger();
  logger?.warn(
    "Deprecation NOTICE:\nGenerate method will switch to use generateVNext implementation September 23rd, 2025. Please use generateLegacyHandler if you don't want to upgrade just yet."
  );
  return generateLegacyHandler({ mastra, ...args });
}
async function generateLegacyHandler({
  mastra,
  runtimeContext,
  agentId,
  body,
  abortSignal
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    sanitizeBody(body, ["tools"]);
    const { messages, resourceId, resourceid, runtimeContext: agentRuntimeContext, ...rest } = body;
    const finalResourceId = resourceId ?? resourceid;
    const finalRuntimeContext = new RuntimeContext([
      ...Array.from(runtimeContext.entries()),
      ...Array.from(Object.entries(agentRuntimeContext ?? {}))
    ]);
    validateBody({ messages });
    const result = await agent.generate(messages, {
      ...rest,
      abortSignal,
      // @ts-expect-error TODO fix types
      resourceId: finalResourceId,
      runtimeContext: finalRuntimeContext
    });
    return result;
  } catch (error) {
    return handleError(error, "Error generating from agent");
  }
}
async function generateVNextHandler({
  mastra,
  runtimeContext,
  agentId,
  body,
  abortSignal
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    sanitizeBody(body, ["tools"]);
    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;
    const finalRuntimeContext = new RuntimeContext([
      ...Array.from(runtimeContext.entries()),
      ...Array.from(Object.entries(agentRuntimeContext ?? {}))
    ]);
    validateBody({ messages });
    const result = await agent.generateVNext(messages, {
      ...rest,
      runtimeContext: finalRuntimeContext,
      format: rest.format || "mastra",
      abortSignal
    });
    return result;
  } catch (error) {
    return handleError(error, "Error generating from agent");
  }
}
async function streamGenerateHandler({
  mastra,
  ...args
}) {
  const logger = mastra.getLogger();
  logger?.warn(
    "Deprecation NOTICE:\n Stream method will switch to use streamVNext implementation September 23rd, 2025. Please use streamGenerateLegacyHandler if you don't want to upgrade just yet."
  );
  return streamGenerateLegacyHandler({ mastra, ...args });
}
async function streamGenerateLegacyHandler({
  mastra,
  runtimeContext,
  agentId,
  body,
  abortSignal
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    const { messages, resourceId, resourceid, runtimeContext: agentRuntimeContext, ...rest } = body;
    const finalResourceId = resourceId ?? resourceid;
    const finalRuntimeContext = new RuntimeContext([
      ...Array.from(runtimeContext.entries()),
      ...Array.from(Object.entries(agentRuntimeContext ?? {}))
    ]);
    validateBody({ messages });
    const streamResult = await agent.stream(messages, {
      ...rest,
      abortSignal,
      // @ts-expect-error TODO fix types
      resourceId: finalResourceId,
      runtimeContext: finalRuntimeContext
    });
    const streamResponse = rest.output ? streamResult.toTextStreamResponse({
      headers: {
        "Transfer-Encoding": "chunked"
      }
    }) : streamResult.toDataStreamResponse({
      sendUsage: true,
      sendReasoning: true,
      getErrorMessage: (error) => {
        return `An error occurred while processing your request. ${error instanceof Error ? error.message : JSON.stringify(error)}`;
      },
      headers: {
        "Transfer-Encoding": "chunked"
      }
    });
    return streamResponse;
  } catch (error) {
    return handleError(error, "error streaming agent response");
  }
}
function streamVNextGenerateHandler({
  mastra,
  runtimeContext,
  agentId,
  body,
  abortSignal
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    sanitizeBody(body, ["tools"]);
    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;
    const finalRuntimeContext = new RuntimeContext([
      ...Array.from(runtimeContext.entries()),
      ...Array.from(Object.entries(agentRuntimeContext ?? {}))
    ]);
    validateBody({ messages });
    const streamResult = agent.streamVNext(messages, {
      ...rest,
      runtimeContext: finalRuntimeContext,
      abortSignal,
      format: body.format ?? "mastra"
    });
    return streamResult;
  } catch (error) {
    return handleError(error, "error streaming agent response");
  }
}
function streamNetworkHandler({
  mastra,
  runtimeContext,
  agentId,
  body
  // abortSignal,
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    sanitizeBody(body, ["tools"]);
    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;
    const finalRuntimeContext = new RuntimeContext([
      ...Array.from(runtimeContext.entries()),
      ...Array.from(Object.entries(agentRuntimeContext ?? {}))
    ]);
    validateBody({ messages });
    const streamResult = agent.network(messages, {
      ...rest,
      memory: {
        thread: rest.thread ?? "",
        resource: rest.resourceId ?? ""
      },
      runtimeContext: finalRuntimeContext
    });
    return streamResult;
  } catch (error) {
    return handleError(error, "error streaming agent loop response");
  }
}
async function streamVNextUIMessageHandler({
  mastra,
  runtimeContext,
  agentId,
  body,
  abortSignal
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    sanitizeBody(body, ["tools"]);
    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;
    const finalRuntimeContext = new RuntimeContext([
      ...Array.from(runtimeContext.entries()),
      ...Array.from(Object.entries(agentRuntimeContext ?? {}))
    ]);
    validateBody({ messages });
    const streamResult = await agent.streamVNext(messages, {
      ...rest,
      runtimeContext: finalRuntimeContext,
      abortSignal,
      format: "aisdk"
    });
    return streamResult.toUIMessageStreamResponse();
  } catch (error) {
    return handleError(error, "error streaming agent response");
  }
}
async function updateAgentModelHandler({
  mastra,
  agentId,
  body
}) {
  try {
    const agent = mastra.getAgent(agentId);
    if (!agent) {
      throw new HTTPException(404, { message: "Agent not found" });
    }
    const agentModel = await agent.getModel();
    const modelVersion = agentModel.specificationVersion;
    const { modelId, provider } = body;
    const providerMap = {
      v1: {
        openai: openai$1(modelId),
        anthropic: anthropic$1(modelId),
        groq: groq$1(modelId),
        xai: xai$1(modelId),
        google: google$1(modelId)
      },
      v2: {
        openai: openai(modelId),
        anthropic: anthropic(modelId),
        groq: groq(modelId),
        xai: xai(modelId),
        google: google(modelId)
      }
    };
    const modelVersionKey = modelVersion === "v2" ? "v2" : "v1";
    let model = providerMap[modelVersionKey][provider];
    agent.__updateModel({ model });
    return { message: "Agent model updated" };
  } catch (error) {
    return handleError(error, "error updating agent model");
  }
}

export { agents_exports, generateHandler, generateLegacyHandler, generateVNextHandler, getAgentByIdHandler, getAgentsHandler, getEvalsByAgentIdHandler, getLiveEvalsByAgentIdHandler, getSerializedAgentTools, streamGenerateHandler, streamGenerateLegacyHandler, streamNetworkHandler, streamVNextGenerateHandler, streamVNextUIMessageHandler, updateAgentModelHandler };
//# sourceMappingURL=chunk-ZSAOHEZK.js.map
//# sourceMappingURL=chunk-ZSAOHEZK.js.map