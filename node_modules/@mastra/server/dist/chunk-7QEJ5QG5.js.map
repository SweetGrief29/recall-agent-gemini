{"version":3,"sources":["../src/server/handlers/scores.ts"],"names":[],"mappings":"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","file":"chunk-7QEJ5QG5.js","sourcesContent":["import type { RuntimeContext } from '@mastra/core/runtime-context';\nimport type { MastraScorerEntry, ScoreRowData } from '@mastra/core/scores';\nimport type { StoragePagination } from '@mastra/core/storage';\nimport type { Context } from '../types';\nimport { handleError } from './error';\n\nasync function getScorersFromSystem({\n  mastra,\n  runtimeContext,\n}: Context & {\n  runtimeContext: RuntimeContext;\n}) {\n  const agents = mastra.getAgents();\n  const workflows = mastra.getWorkflows();\n\n  const scorersMap = new Map<string, MastraScorerEntry & { agentIds: string[]; workflowIds: string[] }>();\n\n  for (const [_agentId, agent] of Object.entries(agents)) {\n    const scorers =\n      (await agent.getScorers({\n        runtimeContext,\n      })) || {};\n\n    if (Object.keys(scorers).length > 0) {\n      for (const [scorerId, scorer] of Object.entries(scorers)) {\n        if (scorersMap.has(scorerId)) {\n          scorersMap.get(scorerId)?.agentIds.push(agent.name);\n        } else {\n          scorersMap.set(scorerId, {\n            workflowIds: [],\n            ...scorer,\n            agentIds: [agent.name],\n          });\n        }\n      }\n    }\n  }\n\n  for (const [workflowId, workflow] of Object.entries(workflows)) {\n    const scorers =\n      (await workflow.getScorers({\n        runtimeContext,\n      })) || {};\n\n    if (Object.keys(scorers).length > 0) {\n      for (const [scorerId, scorer] of Object.entries(scorers)) {\n        if (scorersMap.has(scorerId)) {\n          scorersMap.get(scorerId)?.workflowIds.push(workflowId);\n        } else {\n          scorersMap.set(scorerId, {\n            agentIds: [],\n            ...scorer,\n            workflowIds: [workflowId],\n          });\n        }\n      }\n    }\n  }\n\n  return Object.fromEntries(scorersMap.entries());\n}\n\nexport async function getScorersHandler({ mastra, runtimeContext }: Context & { runtimeContext: RuntimeContext }) {\n  const scorers = await getScorersFromSystem({\n    mastra,\n    runtimeContext,\n  });\n\n  return scorers;\n}\n\nexport async function getScorerHandler({\n  mastra,\n  scorerId,\n  runtimeContext,\n}: Context & { scorerId: string; runtimeContext: RuntimeContext }) {\n  const scorers = await getScorersFromSystem({\n    mastra,\n    runtimeContext,\n  });\n\n  const scorer = scorers[scorerId];\n\n  if (!scorer) {\n    return null;\n  }\n\n  return scorer;\n}\n\nexport async function getScoresByRunIdHandler({\n  mastra,\n  runId,\n  pagination,\n}: Context & { runId: string; pagination: StoragePagination }) {\n  try {\n    const scores =\n      (await mastra.getStorage()?.getScoresByRunId?.({\n        runId,\n        pagination,\n      })) || [];\n    return scores;\n  } catch (error) {\n    return handleError(error, 'Error getting scores by run id');\n  }\n}\n\nexport async function getScoresByScorerIdHandler({\n  mastra,\n  scorerId,\n  pagination,\n  entityId,\n  entityType,\n}: Context & { scorerId: string; pagination: StoragePagination; entityId?: string; entityType?: string }) {\n  try {\n    const scores =\n      (await mastra.getStorage()?.getScoresByScorerId?.({\n        scorerId,\n        pagination,\n        entityId,\n        entityType,\n      })) || [];\n    return scores;\n  } catch (error) {\n    return handleError(error, 'Error getting scores by scorer id');\n  }\n}\n\nexport async function getScoresByEntityIdHandler({\n  mastra,\n  entityId,\n  entityType,\n  pagination,\n}: Context & { entityId: string; entityType: string; pagination: StoragePagination }) {\n  try {\n    let entityIdToUse = entityId;\n\n    if (entityType === 'AGENT') {\n      const agent = mastra.getAgentById(entityId);\n      entityIdToUse = agent.id;\n    } else if (entityType === 'WORKFLOW') {\n      const workflow = mastra.getWorkflowById(entityId);\n      entityIdToUse = workflow.id;\n    }\n\n    const scores =\n      (await mastra.getStorage()?.getScoresByEntityId?.({\n        entityId: entityIdToUse,\n        entityType,\n        pagination,\n      })) || [];\n\n    return scores;\n  } catch (error) {\n    return handleError(error, 'Error getting scores by entity id');\n  }\n}\n\nexport async function saveScoreHandler({ mastra, score }: Context & { score: ScoreRowData }) {\n  try {\n    const scores = (await mastra.getStorage()?.saveScore?.(score)) || [];\n    return scores;\n  } catch (error) {\n    return handleError(error, 'Error saving score');\n  }\n}\n"]}