'use strict';

var chunkRE4RPXT2_cjs = require('./chunk-RE4RPXT2.cjs');
var chunk7NADHFD2_cjs = require('./chunk-7NADHFD2.cjs');
var chunkEMMSS5I5_cjs = require('./chunk-EMMSS5I5.cjs');

// src/server/handlers/observability.ts
var observability_exports = {};
chunkEMMSS5I5_cjs.__export(observability_exports, {
  getAITraceHandler: () => getAITraceHandler,
  getAITracesPaginatedHandler: () => getAITracesPaginatedHandler
});
async function getAITraceHandler({ mastra, traceId }) {
  try {
    if (!traceId) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Trace ID is required" });
    }
    const storage = mastra.getStorage();
    if (!storage) {
      throw new chunk7NADHFD2_cjs.HTTPException(500, { message: "Storage is not available" });
    }
    const trace = await storage.getAITrace(traceId);
    if (!trace) {
      throw new chunk7NADHFD2_cjs.HTTPException(404, { message: `Trace with ID '${traceId}' not found` });
    }
    return trace;
  } catch (error) {
    chunkRE4RPXT2_cjs.handleError(error, "Error getting AI trace");
  }
}
async function getAITracesPaginatedHandler({ mastra, body }) {
  try {
    const storage = mastra.getStorage();
    if (!storage) {
      throw new chunk7NADHFD2_cjs.HTTPException(500, { message: "Storage is not available" });
    }
    if (!body) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Request body is required" });
    }
    const { filters, pagination } = body;
    if (pagination?.page && pagination.page < 0) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Page must be a non-negative integer" });
    }
    if (pagination?.perPage && pagination.perPage < 0) {
      throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Per page must be a non-negative integer" });
    }
    if (pagination?.dateRange) {
      const { start, end } = pagination.dateRange;
      if (start && !(start instanceof Date)) {
        throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Invalid date format in date range" });
      }
      if (end && !(end instanceof Date)) {
        throw new chunk7NADHFD2_cjs.HTTPException(400, { message: "Invalid date format in date range" });
      }
    }
    return storage.getAITracesPaginated({
      pagination,
      filters
    });
  } catch (error) {
    chunkRE4RPXT2_cjs.handleError(error, "Error getting AI traces paginated");
  }
}

exports.getAITraceHandler = getAITraceHandler;
exports.getAITracesPaginatedHandler = getAITracesPaginatedHandler;
exports.observability_exports = observability_exports;
//# sourceMappingURL=chunk-L265APUD.cjs.map
//# sourceMappingURL=chunk-L265APUD.cjs.map