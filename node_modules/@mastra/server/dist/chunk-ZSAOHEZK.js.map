{"version":3,"sources":["../src/server/handlers/agents.ts"],"names":["agent","acc","key","openai","anthropic","groq","xai","google"],"mappings":"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","file":"chunk-ZSAOHEZK.js","sourcesContent":["import { anthropic } from '@ai-sdk/anthropic';\nimport { anthropic as anthropicV5 } from '@ai-sdk/anthropic-v5';\nimport { google } from '@ai-sdk/google';\nimport { google as googleV5 } from '@ai-sdk/google-v5';\nimport { groq } from '@ai-sdk/groq';\nimport { groq as groqV5 } from '@ai-sdk/groq-v5';\nimport { openai } from '@ai-sdk/openai';\nimport { openai as openaiV5 } from '@ai-sdk/openai-v5';\nimport { xai } from '@ai-sdk/xai';\nimport { xai as xaiV5 } from '@ai-sdk/xai-v5';\nimport type { Agent } from '@mastra/core/agent';\nimport { RuntimeContext } from '@mastra/core/runtime-context';\nimport { zodToJsonSchema } from '@mastra/core/utils/zod-to-json';\nimport { stringify } from 'superjson';\n\nimport { HTTPException } from '../http-exception';\nimport type { Context } from '../types';\n\nimport { handleError } from './error';\nimport { sanitizeBody, validateBody } from './utils';\n\ntype GetBody<\n  T extends keyof Agent & { [K in keyof Agent]: Agent[K] extends (...args: any) => any ? K : never }[keyof Agent],\n> = {\n  messages: Parameters<Agent[T]>[0];\n} & Parameters<Agent[T]>[1];\n\nexport async function getSerializedAgentTools(tools: Record<string, any>) {\n  return Object.entries(tools || {}).reduce<any>((acc, [key, tool]) => {\n    const _tool = tool as any;\n\n    const toolId = _tool.id ?? `tool-${key}`;\n\n    let inputSchemaForReturn = undefined;\n\n    if (_tool.inputSchema) {\n      if (_tool.inputSchema?.jsonSchema) {\n        inputSchemaForReturn = stringify(_tool.inputSchema.jsonSchema);\n      } else {\n        inputSchemaForReturn = stringify(zodToJsonSchema(_tool.inputSchema));\n      }\n    }\n\n    let outputSchemaForReturn = undefined;\n\n    if (_tool.outputSchema) {\n      if (_tool.outputSchema?.jsonSchema) {\n        outputSchemaForReturn = stringify(_tool.outputSchema.jsonSchema);\n      } else {\n        outputSchemaForReturn = stringify(zodToJsonSchema(_tool.outputSchema));\n      }\n    }\n\n    acc[key] = {\n      ..._tool,\n      id: toolId,\n      inputSchema: inputSchemaForReturn,\n      outputSchema: outputSchemaForReturn,\n    };\n    return acc;\n  }, {});\n}\n\nasync function getSerializedAgentDefinition({\n  agent,\n  runtimeContext,\n}: {\n  agent: Agent;\n  runtimeContext: RuntimeContext;\n}) {\n  let serializedAgentAgents = {};\n\n  if ('listAgents' in agent) {\n    const agents = await agent.listAgents({ runtimeContext });\n    serializedAgentAgents = Object.entries(agents || {}).reduce<any>((acc, [key, agent]) => {\n      return {\n        ...acc,\n        [key]: { id: agent.id, name: agent.name },\n      };\n    }, {});\n  }\n  return serializedAgentAgents;\n}\n\nasync function formatAgentList({\n  id,\n  mastra,\n  agent,\n  runtimeContext,\n}: {\n  id: string;\n  mastra: Context['mastra'];\n  agent: Agent;\n  runtimeContext: RuntimeContext;\n}) {\n  const instructions = await agent.getInstructions({ runtimeContext });\n  const tools = await agent.getTools({ runtimeContext });\n  const llm = await agent.getLLM({ runtimeContext });\n  const defaultGenerateOptions = await agent.getDefaultGenerateOptions({ runtimeContext });\n  const defaultStreamOptions = await agent.getDefaultStreamOptions({ runtimeContext });\n  const serializedAgentTools = await getSerializedAgentTools(tools);\n\n  let serializedAgentWorkflows = {};\n\n  if ('getWorkflows' in agent) {\n    const logger = mastra.getLogger();\n    try {\n      const workflows = await agent.getWorkflows({ runtimeContext });\n      serializedAgentWorkflows = Object.entries(workflows || {}).reduce<any>((acc, [key, workflow]) => {\n        return {\n          ...acc,\n          [key]: {\n            name: workflow.name,\n          },\n        };\n      }, {});\n    } catch (error) {\n      logger.error('Error getting workflows for agent', { agentName: agent.name, error });\n    }\n  }\n\n  const serializedAgentAgents = await getSerializedAgentDefinition({ agent, runtimeContext });\n\n  const model = llm?.getModel();\n\n  return {\n    id,\n    name: agent.name,\n    instructions,\n    agents: serializedAgentAgents,\n    tools: serializedAgentTools,\n    workflows: serializedAgentWorkflows,\n    provider: llm?.getProvider(),\n    modelId: llm?.getModelId(),\n    modelVersion: model?.specificationVersion,\n    defaultGenerateOptions: defaultGenerateOptions as any,\n    defaultStreamOptions: defaultStreamOptions as any,\n  };\n}\n\n// Agent handlers\nexport async function getAgentsHandler({ mastra, runtimeContext }: Context & { runtimeContext: RuntimeContext }) {\n  try {\n    const agents = mastra.getAgents();\n\n    const serializedAgentsMap = await Promise.all(\n      Object.entries(agents).map(async ([id, agent]) => {\n        return formatAgentList({ id, mastra, agent, runtimeContext });\n      }),\n    );\n\n    const serializedAgents = serializedAgentsMap.reduce<\n      Record<string, Omit<(typeof serializedAgentsMap)[number], 'id'>>\n    >((acc, { id, ...rest }) => {\n      acc[id] = rest;\n      return acc;\n    }, {});\n\n    return serializedAgents;\n  } catch (error) {\n    return handleError(error, 'Error getting agents');\n  }\n}\n\nasync function formatAgent({\n  mastra,\n  agent,\n  runtimeContext,\n  isPlayground,\n}: {\n  mastra: Context['mastra'];\n  agent: Agent;\n  runtimeContext: RuntimeContext;\n  isPlayground: boolean;\n}) {\n  const tools = await agent.getTools({ runtimeContext });\n\n  const serializedAgentTools = await getSerializedAgentTools(tools);\n\n  let serializedAgentWorkflows = {};\n\n  if ('getWorkflows' in agent) {\n    const logger = mastra.getLogger();\n    try {\n      const workflows = await agent.getWorkflows({ runtimeContext });\n\n      serializedAgentWorkflows = Object.entries(workflows || {}).reduce<any>((acc, [key, workflow]) => {\n        return {\n          ...acc,\n          [key]: {\n            name: workflow.name,\n            steps: Object.entries(workflow.steps).reduce<any>((acc, [key, step]) => {\n              return {\n                ...acc,\n                [key]: {\n                  id: step.id,\n                  description: step.description,\n                },\n              };\n            }, {}),\n          },\n        };\n      }, {});\n    } catch (error) {\n      logger.error('Error getting workflows for agent', { agentName: agent.name, error });\n    }\n\n    let proxyRuntimeContext = runtimeContext;\n    if (isPlayground) {\n      proxyRuntimeContext = new Proxy(runtimeContext, {\n        get(target, prop) {\n          if (prop === 'get') {\n            return function (key: string) {\n              const value = target.get(key);\n              return value ?? `<${key}>`;\n            };\n          }\n          return Reflect.get(target, prop);\n        },\n      });\n    }\n\n    const instructions = await agent.getInstructions({ runtimeContext: proxyRuntimeContext });\n    const llm = await agent.getLLM({ runtimeContext });\n    const defaultGenerateOptions = await agent.getDefaultGenerateOptions({ runtimeContext: proxyRuntimeContext });\n    const defaultStreamOptions = await agent.getDefaultStreamOptions({ runtimeContext: proxyRuntimeContext });\n\n    const model = llm?.getModel();\n\n    const serializedAgentAgents = await getSerializedAgentDefinition({ agent, runtimeContext: proxyRuntimeContext });\n\n    return {\n      name: agent.name,\n      instructions,\n      tools: serializedAgentTools,\n      agents: serializedAgentAgents,\n      workflows: serializedAgentWorkflows,\n      provider: llm?.getProvider(),\n      modelId: llm?.getModelId(),\n      modelVersion: model?.specificationVersion,\n      defaultGenerateOptions: defaultGenerateOptions as any,\n      defaultStreamOptions: defaultStreamOptions as any,\n    };\n  }\n}\n\nexport async function getAgentByIdHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  isPlayground = false,\n}: Context & { isPlayground?: boolean; runtimeContext: RuntimeContext; agentId: string }) {\n  try {\n    const agent = mastra.getAgent(agentId);\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n    return formatAgent({ mastra, agent, runtimeContext, isPlayground });\n  } catch (error) {\n    return handleError(error, 'Error getting agent');\n  }\n}\n\nexport async function getEvalsByAgentIdHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n}: Context & { runtimeContext: RuntimeContext; agentId: string }) {\n  try {\n    const agent = mastra.getAgent(agentId);\n    const evals = (await mastra.getStorage()?.getEvalsByAgentName?.(agent.name, 'test')) || [];\n    const instructions = await agent.getInstructions({ runtimeContext });\n    return {\n      id: agentId,\n      name: agent.name,\n      instructions,\n      evals,\n    };\n  } catch (error) {\n    return handleError(error, 'Error getting test evals');\n  }\n}\n\nexport async function getLiveEvalsByAgentIdHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n}: Context & { runtimeContext: RuntimeContext; agentId: string }) {\n  try {\n    const agent = mastra.getAgent(agentId);\n    const evals = (await mastra.getStorage()?.getEvalsByAgentName?.(agent.name, 'live')) || [];\n    const instructions = await agent.getInstructions({ runtimeContext });\n\n    return {\n      id: agentId,\n      name: agent.name,\n      instructions,\n      evals,\n    };\n  } catch (error) {\n    return handleError(error, 'Error getting live evals');\n  }\n}\n\nexport function generateHandler({\n  mastra,\n  ...args\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'generate'> & {\n    // @deprecated use resourceId\n    resourceid?: string;\n    runtimeContext?: Record<string, unknown>;\n  };\n  abortSignal?: AbortSignal;\n}) {\n  const logger = mastra.getLogger();\n  logger?.warn(\n    \"Deprecation NOTICE:\\nGenerate method will switch to use generateVNext implementation September 23rd, 2025. Please use generateLegacyHandler if you don't want to upgrade just yet.\",\n  );\n  return generateLegacyHandler({ mastra, ...args });\n}\n\nexport async function generateLegacyHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'generate'> & {\n    // @deprecated use resourceId\n    resourceid?: string;\n    runtimeContext?: Record<string, unknown>;\n  };\n  abortSignal?: AbortSignal;\n}) {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, resourceId, resourceid, runtimeContext: agentRuntimeContext, ...rest } = body;\n    // Use resourceId if provided, fall back to resourceid (deprecated)\n    const finalResourceId = resourceId ?? resourceid;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const result = await agent.generate(messages, {\n      ...rest,\n      abortSignal,\n      // @ts-expect-error TODO fix types\n      resourceId: finalResourceId,\n      runtimeContext: finalRuntimeContext,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error generating from agent');\n  }\n}\n\nexport async function generateVNextHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'generateVNext'> & {\n    runtimeContext?: Record<string, unknown>;\n    format?: 'mastra' | 'aisdk';\n  };\n  abortSignal?: AbortSignal;\n}): Promise<ReturnType<Agent['generateVNext']>> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const result = await agent.generateVNext(messages, {\n      ...rest,\n      runtimeContext: finalRuntimeContext,\n      format: rest.format || 'mastra',\n      abortSignal,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error generating from agent');\n  }\n}\n\nexport async function streamGenerateHandler({\n  mastra,\n  ...args\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'stream'> & {\n    // @deprecated use resourceId\n    resourceid?: string;\n    runtimeContext?: string;\n  };\n  abortSignal?: AbortSignal;\n}) {\n  const logger = mastra.getLogger();\n  logger?.warn(\n    \"Deprecation NOTICE:\\n Stream method will switch to use streamVNext implementation September 23rd, 2025. Please use streamGenerateLegacyHandler if you don't want to upgrade just yet.\",\n  );\n\n  return streamGenerateLegacyHandler({ mastra, ...args });\n}\nexport async function streamGenerateLegacyHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'stream'> & {\n    // @deprecated use resourceId\n    resourceid?: string;\n    runtimeContext?: string;\n  };\n  abortSignal?: AbortSignal;\n}): Promise<Response | undefined> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    const { messages, resourceId, resourceid, runtimeContext: agentRuntimeContext, ...rest } = body;\n    // Use resourceId if provided, fall back to resourceid (deprecated)\n    const finalResourceId = resourceId ?? resourceid;\n\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = await agent.stream(messages, {\n      ...rest,\n      abortSignal,\n      // @ts-expect-error TODO fix types\n      resourceId: finalResourceId,\n      runtimeContext: finalRuntimeContext,\n    });\n\n    const streamResponse = rest.output\n      ? streamResult.toTextStreamResponse({\n          headers: {\n            'Transfer-Encoding': 'chunked',\n          },\n        })\n      : streamResult.toDataStreamResponse({\n          sendUsage: true,\n          sendReasoning: true,\n          getErrorMessage: (error: any) => {\n            return `An error occurred while processing your request. ${error instanceof Error ? error.message : JSON.stringify(error)}`;\n          },\n          headers: {\n            'Transfer-Encoding': 'chunked',\n          },\n        });\n\n    return streamResponse;\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport function streamVNextGenerateHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'streamVNext'> & {\n    runtimeContext?: string;\n    format?: 'aisdk' | 'mastra';\n  };\n  abortSignal?: AbortSignal;\n}): ReturnType<Agent['streamVNext']> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = agent.streamVNext(messages, {\n      ...rest,\n      runtimeContext: finalRuntimeContext,\n      abortSignal,\n      format: body.format ?? 'mastra',\n    });\n\n    return streamResult;\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport function streamNetworkHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  // abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'network'> & {\n    thread?: string;\n    resourceId?: string;\n  };\n  // abortSignal?: AbortSignal;\n}): ReturnType<Agent['network']> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = agent.network(messages, {\n      ...rest,\n      memory: {\n        thread: rest.thread ?? '',\n        resource: rest.resourceId ?? '',\n      },\n      runtimeContext: finalRuntimeContext,\n    });\n\n    return streamResult;\n  } catch (error) {\n    return handleError(error, 'error streaming agent loop response');\n  }\n}\n\nexport async function streamVNextUIMessageHandler({\n  mastra,\n  runtimeContext,\n  agentId,\n  body,\n  abortSignal,\n}: Context & {\n  runtimeContext: RuntimeContext;\n  agentId: string;\n  body: GetBody<'streamVNext'> & {\n    runtimeContext?: string;\n  };\n  abortSignal?: AbortSignal;\n}): Promise<Response | undefined> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    // UI Frameworks may send \"client tools\" in the body,\n    // but it interferes with llm providers tool handling, so we remove them\n    sanitizeBody(body, ['tools']);\n\n    const { messages, runtimeContext: agentRuntimeContext, ...rest } = body;\n    const finalRuntimeContext = new RuntimeContext<Record<string, unknown>>([\n      ...Array.from(runtimeContext.entries()),\n      ...Array.from(Object.entries(agentRuntimeContext ?? {})),\n    ]);\n\n    validateBody({ messages });\n\n    const streamResult = await agent.streamVNext(messages, {\n      ...rest,\n      runtimeContext: finalRuntimeContext,\n      abortSignal,\n      format: 'aisdk',\n    });\n\n    return streamResult.toUIMessageStreamResponse();\n  } catch (error) {\n    return handleError(error, 'error streaming agent response');\n  }\n}\n\nexport async function updateAgentModelHandler({\n  mastra,\n  agentId,\n  body,\n}: Context & {\n  agentId: string;\n  body: {\n    modelId: string;\n    provider: 'openai' | 'anthropic' | 'groq' | 'xai' | 'google';\n  };\n}): Promise<{ message: string }> {\n  try {\n    const agent = mastra.getAgent(agentId);\n\n    if (!agent) {\n      throw new HTTPException(404, { message: 'Agent not found' });\n    }\n\n    const agentModel = await agent.getModel();\n    const modelVersion = agentModel.specificationVersion;\n\n    const { modelId, provider } = body;\n\n    const providerMap = {\n      v1: {\n        openai: openai(modelId),\n        anthropic: anthropic(modelId),\n        groq: groq(modelId),\n        xai: xai(modelId),\n        google: google(modelId),\n      },\n      v2: {\n        openai: openaiV5(modelId),\n        anthropic: anthropicV5(modelId),\n        groq: groqV5(modelId),\n        xai: xaiV5(modelId),\n        google: googleV5(modelId),\n      },\n    };\n\n    const modelVersionKey = modelVersion === 'v2' ? 'v2' : 'v1';\n\n    let model = providerMap[modelVersionKey][provider];\n\n    agent.__updateModel({ model });\n\n    return { message: 'Agent model updated' };\n  } catch (error) {\n    return handleError(error, 'error updating agent model');\n  }\n}\n"]}