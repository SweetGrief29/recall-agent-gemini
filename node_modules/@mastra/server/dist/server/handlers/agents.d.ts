import type { Agent } from '@mastra/core/agent';
import { RuntimeContext } from '@mastra/core/runtime-context';
import type { Context } from '../types.js';
type GetBody<T extends keyof Agent & {
    [K in keyof Agent]: Agent[K] extends (...args: any) => any ? K : never;
}[keyof Agent]> = {
    messages: Parameters<Agent[T]>[0];
} & Parameters<Agent[T]>[1];
export declare function getSerializedAgentTools(tools: Record<string, any>): Promise<any>;
export declare function getAgentsHandler({ mastra, runtimeContext }: Context & {
    runtimeContext: RuntimeContext;
}): Promise<Record<string, Omit<{
    id: string;
    name: string;
    instructions: string;
    agents: {};
    tools: any;
    workflows: {};
    provider: string;
    modelId: string;
    modelVersion: "v2" | "v1";
    defaultGenerateOptions: any;
    defaultStreamOptions: any;
}, "id">>>;
export declare function getAgentByIdHandler({ mastra, runtimeContext, agentId, isPlayground, }: Context & {
    isPlayground?: boolean;
    runtimeContext: RuntimeContext;
    agentId: string;
}): Promise<{
    name: string;
    instructions: string;
    tools: any;
    agents: {};
    workflows: {};
    provider: string;
    modelId: string;
    modelVersion: "v2" | "v1";
    defaultGenerateOptions: any;
    defaultStreamOptions: any;
} | undefined>;
export declare function getEvalsByAgentIdHandler({ mastra, runtimeContext, agentId, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
}): Promise<{
    id: string;
    name: any;
    instructions: string;
    evals: import("@mastra/core").EvalRow[];
}>;
export declare function getLiveEvalsByAgentIdHandler({ mastra, runtimeContext, agentId, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
}): Promise<{
    id: string;
    name: any;
    instructions: string;
    evals: import("@mastra/core").EvalRow[];
}>;
export declare function generateHandler({ mastra, ...args }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'generate'> & {
        resourceid?: string;
        runtimeContext?: Record<string, unknown>;
    };
    abortSignal?: AbortSignal;
}): Promise<import("@mastra/core").GenerateTextResult<any, undefined>>;
export declare function generateLegacyHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'generate'> & {
        resourceid?: string;
        runtimeContext?: Record<string, unknown>;
    };
    abortSignal?: AbortSignal;
}): Promise<import("@mastra/core").GenerateTextResult<any, undefined>>;
export declare function generateVNextHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'generateVNext'> & {
        runtimeContext?: Record<string, unknown>;
        format?: 'mastra' | 'aisdk';
    };
    abortSignal?: AbortSignal;
}): Promise<ReturnType<Agent['generateVNext']>>;
export declare function streamGenerateHandler({ mastra, ...args }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'stream'> & {
        resourceid?: string;
        runtimeContext?: string;
    };
    abortSignal?: AbortSignal;
}): Promise<Response | undefined>;
export declare function streamGenerateLegacyHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'stream'> & {
        resourceid?: string;
        runtimeContext?: string;
    };
    abortSignal?: AbortSignal;
}): Promise<Response | undefined>;
export declare function streamVNextGenerateHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'streamVNext'> & {
        runtimeContext?: string;
        format?: 'aisdk' | 'mastra';
    };
    abortSignal?: AbortSignal;
}): ReturnType<Agent['streamVNext']>;
export declare function streamNetworkHandler({ mastra, runtimeContext, agentId, body, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'network'> & {
        thread?: string;
        resourceId?: string;
    };
}): ReturnType<Agent['network']>;
export declare function streamVNextUIMessageHandler({ mastra, runtimeContext, agentId, body, abortSignal, }: Context & {
    runtimeContext: RuntimeContext;
    agentId: string;
    body: GetBody<'streamVNext'> & {
        runtimeContext?: string;
    };
    abortSignal?: AbortSignal;
}): Promise<Response | undefined>;
export declare function updateAgentModelHandler({ mastra, agentId, body, }: Context & {
    agentId: string;
    body: {
        modelId: string;
        provider: 'openai' | 'anthropic' | 'groq' | 'xai' | 'google';
    };
}): Promise<{
    message: string;
}>;
export {};
//# sourceMappingURL=agents.d.ts.map