{"version":3,"sources":["../../../src/server/handlers/vNextNetwork.ts"],"names":[],"mappings":"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","file":"vNextNetwork.js","sourcesContent":["import type { RuntimeContext } from '@mastra/core/runtime-context';\nimport { zodToJsonSchema } from '@mastra/core/utils/zod-to-json';\nimport { stringify } from 'superjson';\nimport { HTTPException } from '../http-exception';\nimport type { Context } from '../types';\nimport { handleError } from './error';\nimport { validateBody } from './utils';\n\ninterface NetworkContext extends Context {\n  networkId?: string;\n  runtimeContext: RuntimeContext;\n}\n\nexport async function getVNextNetworksHandler({\n  mastra,\n  runtimeContext,\n}: Pick<NetworkContext, 'mastra' | 'runtimeContext'>) {\n  try {\n    const networks = mastra.vnext_getNetworks();\n\n    const serializedNetworks = await Promise.all(\n      networks.map(async network => {\n        const routingAgent = await network.getRoutingAgent({ runtimeContext });\n        const routingLLM = await routingAgent.getLLM({ runtimeContext });\n        const agents = await network.getAgents({ runtimeContext });\n        const workflows = await network.getWorkflows({ runtimeContext });\n        const tools = await network.getTools({ runtimeContext });\n        const networkInstruction = await network.getInstructions({ runtimeContext });\n        return {\n          id: network.id,\n          name: network.name,\n          instructions: networkInstruction,\n          tools: await Promise.all(\n            Object.values(tools).map(async tool => {\n              return {\n                id: tool.id,\n                description: tool.description,\n              };\n            }),\n          ),\n          agents: await Promise.all(\n            Object.values(agents).map(async agent => {\n              const llm = await agent.getLLM({ runtimeContext });\n              return {\n                name: agent.name,\n                provider: llm?.getProvider(),\n                modelId: llm?.getModelId(),\n              };\n            }),\n          ),\n          workflows: await Promise.all(\n            Object.values(workflows).map(async workflow => {\n              return {\n                name: workflow.name,\n                description: workflow.description,\n                inputSchema: workflow.inputSchema ? stringify(zodToJsonSchema(workflow.inputSchema)) : undefined,\n                outputSchema: workflow.outputSchema ? stringify(zodToJsonSchema(workflow.outputSchema)) : undefined,\n              };\n            }),\n          ),\n          routingModel: {\n            provider: routingLLM?.getProvider(),\n            modelId: routingLLM?.getModelId(),\n          },\n        };\n      }),\n    );\n\n    return serializedNetworks;\n  } catch (error) {\n    return handleError(error, 'Error getting networks');\n  }\n}\n\nexport async function getVNextNetworkByIdHandler({\n  mastra,\n  networkId,\n  runtimeContext,\n}: Pick<NetworkContext, 'mastra' | 'networkId' | 'runtimeContext'>) {\n  try {\n    const network = mastra.vnext_getNetwork(networkId!);\n\n    if (!network) {\n      throw new HTTPException(404, { message: 'Network not found' });\n    }\n\n    const routingAgent = await network.getRoutingAgent({ runtimeContext });\n    const routingLLM = await routingAgent.getLLM({ runtimeContext });\n    const agents = await network.getAgents({ runtimeContext });\n    const workflows = await network.getWorkflows({ runtimeContext });\n    const tools = await network.getTools({ runtimeContext });\n    const networkInstruction = await network.getInstructions({ runtimeContext });\n    const serializedNetwork = {\n      id: network.id,\n      name: network.name,\n      instructions: networkInstruction,\n      agents: await Promise.all(\n        Object.values(agents).map(async agent => {\n          const llm = await agent.getLLM({ runtimeContext });\n          return {\n            name: agent.name,\n            provider: llm?.getProvider(),\n            modelId: llm?.getModelId(),\n          };\n        }),\n      ),\n      workflows: await Promise.all(\n        Object.values(workflows).map(async workflow => {\n          return {\n            name: workflow.name,\n            description: workflow.description,\n            inputSchema: workflow.inputSchema ? stringify(zodToJsonSchema(workflow.inputSchema)) : undefined,\n            outputSchema: workflow.outputSchema ? stringify(zodToJsonSchema(workflow.outputSchema)) : undefined,\n          };\n        }),\n      ),\n      tools: await Promise.all(\n        Object.values(tools).map(async tool => {\n          return {\n            id: tool.id,\n            description: tool.description,\n          };\n        }),\n      ),\n      routingModel: {\n        provider: routingLLM?.getProvider(),\n        modelId: routingLLM?.getModelId(),\n      },\n    };\n\n    return serializedNetwork;\n  } catch (error) {\n    return handleError(error, 'Error getting network by ID');\n  }\n}\n\nexport async function generateVNextNetworkHandler({\n  mastra,\n  runtimeContext,\n  networkId,\n  body,\n}: NetworkContext & {\n  runtimeContext: RuntimeContext;\n  body: { message: string; threadId?: string; resourceId?: string };\n}) {\n  try {\n    const network = mastra.vnext_getNetwork(networkId!);\n\n    if (!network) {\n      throw new HTTPException(404, { message: 'Network not found' });\n    }\n\n    validateBody({ message: body.message });\n\n    const { message, threadId, resourceId } = body;\n    const result = await network.generate(message, { runtimeContext, threadId, resourceId });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error generating from network');\n  }\n}\n\nexport async function streamGenerateVNextNetworkHandler({\n  mastra,\n  networkId,\n  body,\n  runtimeContext,\n}: NetworkContext & {\n  runtimeContext: RuntimeContext;\n  body: { message: string; threadId?: string; resourceId?: string };\n}) {\n  try {\n    const network = mastra.vnext_getNetwork(networkId!);\n\n    if (!network) {\n      throw new HTTPException(404, { message: 'Network not found' });\n    }\n\n    validateBody({ message: body.message });\n\n    const { message, threadId, resourceId } = body;\n    const streamResult = await network.stream(message, {\n      runtimeContext,\n      threadId,\n      resourceId,\n    });\n\n    return streamResult;\n  } catch (error) {\n    return handleError(error, 'Error streaming from network');\n  }\n}\n\nexport async function loopVNextNetworkHandler({\n  mastra,\n  networkId,\n  body,\n  runtimeContext,\n}: NetworkContext & {\n  runtimeContext: RuntimeContext;\n  body: { message: string };\n}) {\n  try {\n    const network = mastra.vnext_getNetwork(networkId!);\n\n    if (!network) {\n      throw new HTTPException(404, { message: 'Network not found' });\n    }\n\n    validateBody({ message: body.message });\n\n    const { message } = body;\n    const result = await network.loop(message, {\n      runtimeContext,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error looping network');\n  }\n}\n\nexport async function loopStreamVNextNetworkHandler({\n  mastra,\n  networkId,\n  body,\n  runtimeContext,\n}: NetworkContext & {\n  runtimeContext: RuntimeContext;\n  body: { message: string; threadId?: string; resourceId?: string; maxIterations?: number };\n}) {\n  try {\n    const network = mastra.vnext_getNetwork(networkId!);\n\n    if (!network) {\n      throw new HTTPException(404, { message: 'Network not found' });\n    }\n\n    validateBody({ message: body.message });\n\n    const { message, threadId, resourceId, maxIterations } = body;\n    const result = await network.loopStream(message, {\n      runtimeContext,\n      threadId,\n      resourceId,\n      maxIterations,\n    });\n\n    return result;\n  } catch (error) {\n    return handleError(error, 'Error streaming network loop');\n  }\n}\n"]}