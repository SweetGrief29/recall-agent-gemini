import { handleError } from './chunk-CY4TP3FK.js';
import { HTTPException } from './chunk-MMROOK5J.js';
import { __export } from './chunk-G3PMV62Z.js';

// src/server/handlers/observability.ts
var observability_exports = {};
__export(observability_exports, {
  getAITraceHandler: () => getAITraceHandler,
  getAITracesPaginatedHandler: () => getAITracesPaginatedHandler
});
async function getAITraceHandler({ mastra, traceId }) {
  try {
    if (!traceId) {
      throw new HTTPException(400, { message: "Trace ID is required" });
    }
    const storage = mastra.getStorage();
    if (!storage) {
      throw new HTTPException(500, { message: "Storage is not available" });
    }
    const trace = await storage.getAITrace(traceId);
    if (!trace) {
      throw new HTTPException(404, { message: `Trace with ID '${traceId}' not found` });
    }
    return trace;
  } catch (error) {
    handleError(error, "Error getting AI trace");
  }
}
async function getAITracesPaginatedHandler({ mastra, body }) {
  try {
    const storage = mastra.getStorage();
    if (!storage) {
      throw new HTTPException(500, { message: "Storage is not available" });
    }
    if (!body) {
      throw new HTTPException(400, { message: "Request body is required" });
    }
    const { filters, pagination } = body;
    if (pagination?.page && pagination.page < 0) {
      throw new HTTPException(400, { message: "Page must be a non-negative integer" });
    }
    if (pagination?.perPage && pagination.perPage < 0) {
      throw new HTTPException(400, { message: "Per page must be a non-negative integer" });
    }
    if (pagination?.dateRange) {
      const { start, end } = pagination.dateRange;
      if (start && !(start instanceof Date)) {
        throw new HTTPException(400, { message: "Invalid date format in date range" });
      }
      if (end && !(end instanceof Date)) {
        throw new HTTPException(400, { message: "Invalid date format in date range" });
      }
    }
    return storage.getAITracesPaginated({
      pagination,
      filters
    });
  } catch (error) {
    handleError(error, "Error getting AI traces paginated");
  }
}

export { getAITraceHandler, getAITracesPaginatedHandler, observability_exports };
//# sourceMappingURL=chunk-R7NOGUZG.js.map
//# sourceMappingURL=chunk-R7NOGUZG.js.map