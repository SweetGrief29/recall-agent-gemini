import type { Context } from 'hono';
export declare const sharedBodyOptions: any;
export declare const vNextBodyOptions: any;
export declare function getAgentsHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    [x: string]: {
        agents: {};
        workflows: {};
        name: string;
        tools: any;
        provider: string;
        instructions: string;
        modelId: string;
        modelVersion: "v2" | "v1";
        defaultGenerateOptions: any;
        defaultStreamOptions: any;
    };
}, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function getAgentByIdHandler(c: Context): Promise<Response & import("hono").TypedResponse<never, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function getEvalsByAgentIdHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    id: string;
    name: any;
    instructions: string;
    evals: {
        input: string;
        output: string;
        result: {
            score: number;
            info?: {
                [x: string]: any;
            } | undefined;
        };
        agentName: string;
        createdAt: string;
        metricName: string;
        instructions: string;
        runId: string;
        globalRunId: string;
        testInfo?: {
            testName?: string | undefined;
            testPath?: string | undefined;
        } | undefined;
    }[];
}, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function getLiveEvalsByAgentIdHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    id: string;
    name: any;
    instructions: string;
    evals: {
        input: string;
        output: string;
        result: {
            score: number;
            info?: {
                [x: string]: any;
            } | undefined;
        };
        agentName: string;
        createdAt: string;
        metricName: string;
        instructions: string;
        runId: string;
        globalRunId: string;
        testInfo?: {
            testName?: string | undefined;
            testPath?: string | undefined;
        } | undefined;
    }[];
}, import("hono/utils/http-status").ContentfulStatusCode, "json">>;
export declare function generateLegacyHandler(c: Context): Promise<Response>;
export declare function generateHandler(c: Context): Promise<Response>;
export declare function generateVNextHandler(c: Context): Promise<Response>;
export declare function streamGenerateLegacyHandler(c: Context): Promise<Response | undefined>;
export declare function streamGenerateHandler(c: Context): Promise<Response | undefined>;
export declare function streamVNextGenerateHandler(c: Context): Promise<Response | undefined>;
export declare function streamNetworkHandler(c: Context): Promise<Response>;
export declare function streamVNextUIMessageHandler(c: Context): Promise<Response | undefined>;
export declare function setAgentInstructionsHandler(c: Context): Promise<Response>;
export declare function updateAgentModelHandler(c: Context): Promise<Response>;
export declare function deprecatedStreamVNextHandler(c: Context): Promise<Response & import("hono").TypedResponse<{
    error: string;
    message: string;
    deprecated_endpoint: string;
    replacement_endpoint: string;
}, 410, "json">>;
export declare function getModelProvidersHandler(c: Context): Promise<(Response & import("hono").TypedResponse<{
    error: string;
}, 403, "json">) | (Response & import("hono").TypedResponse<string[], import("hono/utils/http-status").ContentfulStatusCode, "json">)>;
//# sourceMappingURL=handlers.d.ts.map