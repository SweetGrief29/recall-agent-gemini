/**
 * No Op Implementation for MastraAITracing
 */
import type { MastraAITracing } from './base.js';
import type { AISpanType, AISpan, AISpanOptions, AISpanTypeMap, AnyAISpan } from './types.js';
export declare class NoOpAISpan<TType extends AISpanType = any> implements AISpan<TType> {
    id: string;
    name: string;
    type: TType;
    attributes: AISpanTypeMap[TType];
    parent?: AnyAISpan;
    traceId: string;
    startTime: Date;
    endTime?: Date;
    isEvent: boolean;
    aiTracing: MastraAITracing;
    input?: any;
    output?: any;
    errorInfo?: {
        message: string;
        id?: string;
        domain?: string;
        category?: string;
        details?: Record<string, any>;
    };
    metadata?: Record<string, any>;
    constructor(options: AISpanOptions<TType>, aiTracing: MastraAITracing);
    end(_options?: {
        output?: any;
        attributes?: Partial<AISpanTypeMap[TType]>;
        metadata?: Record<string, any>;
    }): void;
    error(_options: {
        error: any;
        endSpan?: boolean;
        attributes?: Partial<AISpanTypeMap[TType]>;
        metadata?: Record<string, any>;
    }): void;
    createChildSpan<TChildType extends AISpanType>(options: {
        type: TChildType;
        name: string;
        input?: any;
        attributes?: AISpanTypeMap[TChildType];
        metadata?: Record<string, any>;
    }): AISpan<TChildType>;
    createEventSpan<TChildType extends AISpanType>(options: {
        type: TChildType;
        name: string;
        output?: any;
        attributes?: AISpanTypeMap[TChildType];
        metadata?: Record<string, any>;
    }): AISpan<TChildType>;
    update(_options?: {
        input?: any;
        output?: any;
        attributes?: Partial<AISpanTypeMap[TType]>;
        metadata?: Record<string, any>;
    }): void;
    get isRootSpan(): boolean;
    get isValid(): boolean;
}
//# sourceMappingURL=no-op.d.ts.map