/**
 * Utility functions for cleaning and manipulating metadata objects
 * used in AI tracing and observability.
 */
import type { RuntimeContext } from '../di/index.js';
import type { AISpan, AISpanType, AISpanTypeMap, AnyAISpan, TracingContext, TracingOptions } from './types.js';
export interface DeepCleanOptions {
    keysToStrip?: Set<string>;
    maxDepth?: number;
}
/**
 * Recursively cleans a value by removing circular references and stripping problematic or sensitive keys.
 * Circular references are replaced with "[Circular]". Unserializable values are replaced with error messages.
 * Keys like "logger" and "tracingContext" are stripped by default.
 * A maximum recursion depth is enforced to avoid stack overflow or excessive memory usage.
 *
 * @param value - The value to clean (object, array, primitive, etc.)
 * @param options - Optional configuration:
 *   - keysToStrip: Set of keys to remove from objects (default: logger, tracingContext)
 *   - maxDepth: Maximum recursion depth before values are replaced with "[MaxDepth]" (default: 10)
 * @returns A cleaned version of the input with circular references, specified keys, and overly deep values handled
 */
export declare function deepClean(value: any, options?: DeepCleanOptions, _seen?: WeakSet<any>, _depth?: number): any;
/**
 * Removes specific keys from an object.
 * @param obj - The original object
 * @param keysToOmit - Keys to exclude from the returned object
 * @returns A new object with the specified keys removed
 */
export declare function omitKeys<T extends Record<string, any>>(obj: T, keysToOmit: string[]): Partial<T>;
/**
 * Selectively extracts specific fields from an object using dot notation.
 * Does not error if fields don't exist - simply omits them from the result.
 * @param obj - The source object to extract fields from
 * @param fields - Array of field paths (supports dot notation like 'output.text')
 * @returns New object containing only the specified fields
 */
export declare function selectFields(obj: any, fields: string[]): any;
/**
 * Creates or gets a child span from existing tracing context or starts a new trace.
 * This helper consolidates the common pattern of creating spans that can either be:
 * 1. Children of an existing span (when tracingContext.currentSpan exists)
 * 2. New root spans (when no current span exists)
 *
 * @param options - Configuration object for span creation
 * @returns The created AI span or undefined if tracing is disabled
 */
export declare function getOrCreateSpan<T extends AISpanType>(options: {
    type: T;
    name: string;
    input?: any;
    attributes?: AISpanTypeMap[T];
    metadata?: Record<string, any>;
    tracingContext?: TracingContext;
    tracingOptions?: TracingOptions;
    runtimeContext?: RuntimeContext;
}): AISpan<T> | undefined;
/**
 * Extracts the trace ID from a span if it is valid.
 *
 * This helper is typically used to safely retrieve the `traceId` from a span object,
 * while gracefully handling invalid spans — such as no-op spans — by returning `undefined`.
 *
 * A span is considered valid if `span.isValid` is `true`.
 *
 * @param span - The span object to extract the trace ID from. May be `undefined`.
 * @returns The `traceId` if the span is valid, otherwise `undefined`.
 */
export declare function getValidTraceId(span?: AnyAISpan): string | undefined;
//# sourceMappingURL=utils.d.ts.map