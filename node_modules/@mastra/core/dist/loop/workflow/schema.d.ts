import z from 'zod';
export declare const llmIterationOutputSchema: z.ZodObject<{
    messageId: z.ZodString;
    messages: z.ZodObject<{
        all: z.ZodArray<z.ZodAny, "many">;
        user: z.ZodArray<z.ZodAny, "many">;
        nonUser: z.ZodArray<z.ZodAny, "many">;
    }, "strip", z.ZodTypeAny, {
        user: any[];
        all: any[];
        nonUser: any[];
    }, {
        user: any[];
        all: any[];
        nonUser: any[];
    }>;
    output: z.ZodAny;
    metadata: z.ZodAny;
    stepResult: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    messageId: string;
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    output?: any;
    metadata?: any;
    stepResult?: any;
}, {
    messageId: string;
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    output?: any;
    metadata?: any;
    stepResult?: any;
}>;
export declare const toolCallInputSchema: z.ZodObject<{
    toolCallId: z.ZodString;
    toolName: z.ZodString;
    args: z.ZodAny;
    providerMetadata: z.ZodAny;
    providerExecuted: z.ZodOptional<z.ZodBoolean>;
    output: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    toolCallId: string;
    toolName: string;
    providerMetadata?: any;
    providerExecuted?: boolean | undefined;
    output?: any;
    args?: any;
}, {
    toolCallId: string;
    toolName: string;
    providerMetadata?: any;
    providerExecuted?: boolean | undefined;
    output?: any;
    args?: any;
}>;
export declare const toolCallOutputSchema: z.ZodObject<{
    toolCallId: z.ZodString;
    toolName: z.ZodString;
    args: z.ZodAny;
    providerMetadata: z.ZodAny;
    providerExecuted: z.ZodOptional<z.ZodBoolean>;
    output: z.ZodOptional<z.ZodAny>;
} & {
    result: z.ZodAny;
    error: z.ZodOptional<z.ZodAny>;
}, "strip", z.ZodTypeAny, {
    toolCallId: string;
    toolName: string;
    error?: any;
    providerMetadata?: any;
    providerExecuted?: boolean | undefined;
    output?: any;
    args?: any;
    result?: any;
}, {
    toolCallId: string;
    toolName: string;
    error?: any;
    providerMetadata?: any;
    providerExecuted?: boolean | undefined;
    output?: any;
    args?: any;
    result?: any;
}>;
//# sourceMappingURL=schema.d.ts.map