import type { ToolSet } from 'ai-v5';
import type { OutputSchema } from '../../stream/base/schema.js';
import type { OuterLLMRun } from '../types.js';
export declare function createLLMExecutionStep<Tools extends ToolSet = ToolSet, OUTPUT extends OutputSchema | undefined = undefined>({ model, _internal, messageId, runId, modelStreamSpan, telemetry_settings, tools, toolChoice, messageList, includeRawChunks, modelSettings, providerOptions, options, toolCallStreaming, controller, output, outputProcessors, headers, downloadRetries, downloadConcurrency, }: OuterLLMRun<Tools, OUTPUT>): import("../..").Step<"llm-execution", import("zod").ZodObject<{
    messageId: import("zod").ZodString;
    messages: import("zod").ZodObject<{
        all: import("zod").ZodArray<import("zod").ZodAny, "many">;
        user: import("zod").ZodArray<import("zod").ZodAny, "many">;
        nonUser: import("zod").ZodArray<import("zod").ZodAny, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        user: any[];
        all: any[];
        nonUser: any[];
    }, {
        user: any[];
        all: any[];
        nonUser: any[];
    }>;
    output: import("zod").ZodAny;
    metadata: import("zod").ZodAny;
    stepResult: import("zod").ZodOptional<import("zod").ZodAny>;
}, "strip", import("zod").ZodTypeAny, {
    messageId: string;
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    output?: any;
    metadata?: any;
    stepResult?: any;
}, {
    messageId: string;
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    output?: any;
    metadata?: any;
    stepResult?: any;
}>, import("zod").ZodObject<{
    messageId: import("zod").ZodString;
    messages: import("zod").ZodObject<{
        all: import("zod").ZodArray<import("zod").ZodAny, "many">;
        user: import("zod").ZodArray<import("zod").ZodAny, "many">;
        nonUser: import("zod").ZodArray<import("zod").ZodAny, "many">;
    }, "strip", import("zod").ZodTypeAny, {
        user: any[];
        all: any[];
        nonUser: any[];
    }, {
        user: any[];
        all: any[];
        nonUser: any[];
    }>;
    output: import("zod").ZodAny;
    metadata: import("zod").ZodAny;
    stepResult: import("zod").ZodOptional<import("zod").ZodAny>;
}, "strip", import("zod").ZodTypeAny, {
    messageId: string;
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    output?: any;
    metadata?: any;
    stepResult?: any;
}, {
    messageId: string;
    messages: {
        user: any[];
        all: any[];
        nonUser: any[];
    };
    output?: any;
    metadata?: any;
    stepResult?: any;
}>, import("zod").ZodType<any, import("zod").ZodTypeDef, any>, import("zod").ZodType<any, import("zod").ZodTypeDef, any>, import("../..").DefaultEngineType>;
//# sourceMappingURL=llm-execution.d.ts.map